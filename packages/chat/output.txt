This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed, line numbers have been added.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*
- Files matching these patterns are excluded: **/*.log, **/uv.lock, **/package-lock.json, **/.env, **/Cargo.lock, **/node_modules, **/target, **/dist, **/build, **/output.txt, **/yarn.lock, **/uv.lock, **/package-lock.json, **/.env, **/Cargo.lock, **/node_modules, **/target, **/dist, **/build, **/output.txt, **/yarn.lock, **/.private-journal
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  __tests__/
    accessibility.test.tsx
    BottomBar.test.tsx
    HistoryScreen.test.tsx
    HomeScreen.test.tsx
    storage.test.ts
    TabBar.test.tsx
  components/
    BigTextDisplay.tsx
    BottomBar.tsx
    ErrorBoundary.tsx
    HomeScreen.tsx
    InstallPWA.tsx
    LanguageSelector.tsx
    PageLayout.tsx
    TabBar.tsx
    WelcomeModal.tsx
  context/
    SettingsContext.tsx
    TextContext.tsx
    TextReducer.ts
  hooks/
    useIsMounted.ts
  i18n/
    translations/
      bn.ts
      de.ts
      en.ts
      es.ts
      fr.ts
      hi.ts
      id.ts
      index.ts
      ja.ts
      ko.ts
      pt.ts
      zh_TW.ts
      zh.ts
    config.ts
  themes/
    index.ts
  utils/
    languageStorage.ts
    registerServiceWorker.ts
    settingsStorage.ts
    storage.ts
    storageUtils.ts
  _layout.tsx
  +html.tsx
  about.tsx
  help.tsx
  history.tsx
  index.tsx
  settings.tsx
assets/
  fonts/
    SpaceMono-Regular.ttf
  images/
    adaptive-icon.png
    favicon.png
    icon.png
    partial-react-logo.png
    splash-icon.png
public/
  imgs/
    logo/
      orbiting-icon-appstore.png
      orbiting-icon-transparentbg.png
      orbiting-icon.png
      orbiting-icon.svg
    splashscreens/
      ipad_splash.png
      ipadpro1_splash.png
      ipadpro2_splash.png
      ipadpro3_splash.png
      iphone5_splash.png
      iphone6_splash.png
      iphoneplus_splash.png
      iphonex_splash.png
      iphonexr_splash.png
      iphonexsmax_splash.png
    android-icon-144x144.png
    android-icon-192x192.png
    android-icon-36x36.png
    android-icon-48x48.png
    android-icon-72x72.png
    android-icon-96x96.png
    apple-icon-114x114.png
    apple-icon-120x120.png
    apple-icon-144x144.png
    apple-icon-152x152.png
    apple-icon-180x180.png
    apple-icon-57x57.png
    apple-icon-60x60.png
    apple-icon-72x72.png
    apple-icon-76x76.png
    apple-icon-precomposed.png
    apple-icon.png
    favicon-16x16.png
    favicon-32x32.png
    favicon-96x96.png
    favicon.ico
    ms-icon-144x144.png
    ms-icon-150x150.png
    ms-icon-310x310.png
    ms-icon-70x70.png
    og.png
  browserconfig.xml
  manifest.json
.eslintrc.js
.gitignore
app.json
biome.json
jest.setup.js
package.json
README.md
tsconfig.json
workbox-config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/__tests__/accessibility.test.tsx">
 1: import React from 'react';
 2: import { render } from '@testing-library/react-native';
 3: import { AccessibilityInfo } from 'react-native';
 4: import HomeScreen from '../components/HomeScreen';
 5: import BottomBar from '../components/BottomBar';
 6: import TabBar from '../components/TabBar';
 7: import BigTextDisplay from '../components/BigTextDisplay';
 8: describe('Accessibility Tests', () => {
 9:   beforeEach(() => {
10:     jest.clearAllMocks();
11:   });
12:   describe('BigTextDisplay', () => {
13:     it('has proper accessibility props', () => {
14:       const { getByTestId } = render(
15:         <BigTextDisplay text="" onChangeText={() => {}} />
16:       );
17:       const input = getByTestId('big-text-display');
18:       expect(input.props.accessibilityLabel).toBe('Main text input');
19:       expect(input.props.accessibilityRole).toBe('textbox');
20:     });
21:   });
22:   describe('BottomBar', () => {
23:     it('has accessible buttons', () => {
24:       const { getByTestId } = render(
25:         <BottomBar onClearPress={() => {}} onHistoryPress={() => {}} />
26:       );
27:       const clearButton = getByTestId('clear-button');
28:       const historyButton = getByTestId('history-button');
29:       expect(clearButton.props.accessibilityLabel).toBe('Clear text');
30:       expect(historyButton.props.accessibilityLabel).toBe('Show history');
31:     });
32:   });
33:   describe('TabBar', () => {
34:     it('has accessible navigation', () => {
35:       const { getByA11yLabel } = render(<TabBar />);
36:       const nav = getByA11yLabel('Main navigation');
37:       expect(nav).toBeTruthy();
38:     });
39:   });
40:   describe('Screen reader announcements', () => {
41:     it('announces errors', () => {
42:       const mockAnnounce = jest.spyOn(AccessibilityInfo, 'announceForAccessibility');
43:       const { rerender } = render(<HomeScreen />);
44:       // Simulate an error
45:       rerender(<HomeScreen error="Test error" />);
46:       expect(mockAnnounce).toHaveBeenCalledWith('Test error');
47:     });
48:   });
49: });
</file>

<file path="app/__tests__/BottomBar.test.tsx">
 1: import { render, fireEvent } from '@testing-library/react-native';
 2: import BottomBar from '../components/BottomBar';
 3: describe('BottomBar', () => {
 4:     it('calls onClearPress when clear button is pressed', () => {
 5:         const onClearPress = jest.fn();
 6:         const onHistoryPress = jest.fn();
 7:         const { getByTestId } = render(
 8:             <BottomBar 
 9:                 onClearPress={onClearPress}
10:                 onHistoryPress={onHistoryPress}
11:             />
12:         );
13:         fireEvent.press(getByTestId('clear-button'));
14:         expect(onClearPress).toHaveBeenCalled();
15:     });
16:     it('calls onHistoryPress when history button is pressed', () => {
17:         const onClearPress = jest.fn();
18:         const onHistoryPress = jest.fn();
19:         const { getByTestId } = render(
20:             <BottomBar 
21:                 onClearPress={onClearPress}
22:                 onHistoryPress={onHistoryPress}
23:             />
24:         );
25:         fireEvent.press(getByTestId('history-button'));
26:         expect(onHistoryPress).toHaveBeenCalled();
27:     });
28: });
</file>

<file path="app/__tests__/HistoryScreen.test.tsx">
 1: import { render, fireEvent, act } from '@testing-library/react-native';
 2: import AsyncStorage from '@react-native-async-storage/async-storage';
 3: import HistoryScreen from '../history';
 4: import { storeMessage } from '../utils/storage';
 5: // Mock Alert
 6: jest.mock('react-native', () => ({
 7:   ...jest.requireActual('react-native'),
 8:   Alert: {
 9:     ...jest.requireActual('react-native').Alert,
10:     alert: jest.fn()
11:   }
12: }));
13: // Mock expo-router
14: jest.mock('expo-router', () => ({
15:   useRouter: () => ({
16:     push: jest.fn(),
17:   }),
18: }));
19: describe('HistoryScreen', () => {
20:   beforeEach(async () => {
21:     await AsyncStorage.clear();
22:   });
23:   it('renders empty state correctly', async () => {
24:     const { queryByText } = render(<HistoryScreen />);
25:     await act(async () => {});
26:     expect(queryByText('Clear History')).toBeNull();
27:     expect(queryByText('No messages yet')).toBeTruthy();
28:   });
29:   it('displays stored messages', async () => {
30:     const testMessage = 'Test message';
31:     await storeMessage(testMessage);
32:     const { getByText } = render(<HistoryScreen />);
33:     await act(async () => {});
34:     expect(getByText(testMessage)).toBeTruthy();
35:   });
36:   it('clears history when clear button is pressed', async () => {
37:     await storeMessage('Test message');
38:     const { getByText } = render(<HistoryScreen />);
39:     await act(async () => {});
40:     const clearButton = getByText('Clear History');
41:     fireEvent.press(clearButton);
42:     // Find and press the confirmation "Clear" button
43:     const alertButtons = require('react-native').Alert.alert.mock.calls[0][2];
44:     const clearAction = alertButtons.find((button: any) => button.text === 'Clear');
45:     await act(async () => {
46:       await clearAction.onPress();
47:     });
48:     const messages = await AsyncStorage.getItem('@messages');
49:     expect(messages).toBe(JSON.stringify([]));
50:   });
51: });
</file>

<file path="app/__tests__/HomeScreen.test.tsx">
 1: import { render, screen, fireEvent } from "@testing-library/react-native";
 2: import { GestureDetector } from "react-native-gesture-handler";
 3: import HomeScreen from "../components/HomeScreen";
 4: import { router } from "expo-router";
 5: // Mock expo-router
 6: jest.mock('expo-router', () => ({
 7:   router: {
 8:     push: jest.fn(),
 9:   },
10: }));
11: // Mock gesture handler
12: jest.mock('react-native-gesture-handler', () => ({
13:   GestureDetector: jest.fn(({ children }) => children),
14:   Gesture: {
15:     Fling: () => ({
16:       direction: () => ({
17:         onEnd: (callback) => {
18:           return {
19:             callback,
20:             direction: jest.fn(),
21:           };
22:         },
23:       }),
24:     }),
25:     Race: (...gestures) => ({
26:       gestures,
27:     }),
28:   },
29: }));
30: describe("HomeScreen", () => {
31:   afterEach(() => {
32:     jest.clearAllMocks();
33:   });
34:   it("renders initial Hello Orbiting! text", () => {
35:     render(<HomeScreen />);
36:     const display = screen.getByTestId("big-text-display");
37:     expect(display.props.value).toBe("Hello Orbiting!");
38:   });
39:   it("updates displayed text when edited", () => {
40:     render(<HomeScreen />);
41:     const display = screen.getByTestId("big-text-display");
42:     fireEvent.changeText(display, "New Text");
43:     expect(display.props.value).toBe("New Text");
44:   });
45:   it("displays text with large font size for short text", () => {
46:     render(<HomeScreen />);
47:     const display = screen.getByTestId("big-text-display");
48:     expect(display.props.style).toEqual(
49:       expect.objectContaining({
50:         fontSize: 48
51:       })
52:     );
53:   });
54:   it("reduces font size for long text", () => {
55:     render(<HomeScreen />);
56:     const display = screen.getByTestId("big-text-display");
57:     fireEvent.changeText(display, "This is a very long text that should cause the font size to decrease");
58:     expect(display.props.style.fontSize).toBeLessThan(48);
59:     expect(display.props.style.fontSize).toBeGreaterThanOrEqual(24);
60:   });
61: });
62:   it('clears text on left swipe gesture', async () => {
63:     render(<HomeScreen />);
64:     const display = screen.getByTestId("big-text-display");
65:     // Set some initial text
66:     fireEvent.changeText(display, "Test Text");
67:     expect(display.props.value).toBe("Test Text");
68:     // Simulate left swipe by directly calling the gesture callback
69:     const gestureProps = (GestureDetector as jest.Mock).mock.calls[0][0];
70:     const leftSwipeCallback = gestureProps.gesture.gestures[0].callback;
71:     leftSwipeCallback();
72:     expect(display.props.value).toBe("");
73:   });
74:   it('navigates to history on up swipe gesture', () => {
75:     const { unmount } = render(<HomeScreen />);
76:     render(<HomeScreen />);
77:     // Simulate up swipe by directly calling the gesture callback
78:     const gestureProps = (GestureDetector as jest.Mock).mock.calls[0][0];
79:     const upSwipeCallback = gestureProps.gesture.gestures[1].callback;
80:     upSwipeCallback();
81:     expect(router.push).toHaveBeenCalledWith('/history');
82:     unmount();
83:   });
84:   it('cleans up text state on unmount', () => {
85:     const { unmount } = render(<HomeScreen />);
86:     const display = screen.getByTestId("big-text-display");
87:     // Set some text
88:     fireEvent.changeText(display, "Test Text");
89:     expect(display.props.value).toBe("Test Text");
90:     // Unmount and verify cleanup
91:     unmount();
92:     // Re-render to verify state is clean
93:     render(<HomeScreen />);
94:     const newDisplay = screen.getByTestId("big-text-display");
95:     expect(newDisplay.props.value).toBe("");
96:   });
</file>

<file path="app/__tests__/storage.test.ts">
 1: // Mock AsyncStorage before imports
 2: jest.mock('@react-native-async-storage/async-storage', () => ({
 3:   setItem: jest.fn(() => Promise.resolve()),
 4:   getItem: jest.fn(() => Promise.resolve(null)),
 5:   removeItem: jest.fn(() => Promise.resolve()),
 6:   clear: jest.fn(() => Promise.resolve()),
 7: }));
 8: import AsyncStorage from '@react-native-async-storage/async-storage';
 9: import { storeMessage, getMessages } from '../utils/storage';
10: describe('Storage Utils', () => {
11:   beforeEach(() => {
12:     jest.clearAllMocks();
13:     // Mock implementation for AsyncStorage.getItem to return empty array by default
14:     AsyncStorage.getItem.mockResolvedValue(JSON.stringify([]));
15:   });
16:   it('should store and retrieve messages', async () => {
17:     const testMessage = 'Hello, World!';
18:     // Mock implementation for this specific test
19:     let storedData = [];
20:     AsyncStorage.setItem.mockImplementation((key, value) => {
21:       storedData = JSON.parse(value);
22:       return Promise.resolve();
23:     });
24:     AsyncStorage.getItem.mockImplementation(() => {
25:       return Promise.resolve(JSON.stringify(storedData));
26:     });
27:     await storeMessage(testMessage);
28:     const result = await getMessages();
29:     expect(result.messages).toHaveLength(1);
30:     expect(result.messages[0].text).toBe(testMessage);
31:     expect(result.messages[0].id).toBeDefined();
32:     expect(result.messages[0].timestamp).toBeDefined();
33:   });
34:   it('should append new messages to existing ones', async () => {
35:     // Mock implementation for this specific test
36:     let storedData = [];
37:     AsyncStorage.setItem.mockImplementation((key, value) => {
38:       storedData = JSON.parse(value);
39:       return Promise.resolve();
40:     });
41:     AsyncStorage.getItem.mockImplementation(() => {
42:       return Promise.resolve(JSON.stringify(storedData));
43:     });
44:     await storeMessage('First message');
45:     await storeMessage('Second message');
46:     const result = await getMessages();
47:     expect(result.messages).toHaveLength(2);
48:     expect(result.messages[0].text).toBe('Second message');
49:     expect(result.messages[1].text).toBe('First message');
50:   });
51:   it('should return empty array when no messages exist', async () => {
52:     AsyncStorage.getItem.mockResolvedValue(null);
53:     const result = await getMessages();
54:     expect(result.messages).toEqual([]);
55:   });
56: });
</file>

<file path="app/__tests__/TabBar.test.tsx">
 1: import { render, fireEvent } from '@testing-library/react-native';
 2: import TabBar from '../components/TabBar';
 3: import { useRouter, usePathname } from 'expo-router';
 4: // Mock expo-router
 5: jest.mock('expo-router', () => ({
 6:   useRouter: jest.fn(),
 7:   usePathname: jest.fn()
 8: }));
 9: describe('TabBar', () => {
10:   const mockRouter = { push: jest.fn() };
11:   beforeEach(() => {
12:     (useRouter as jest.Mock).mockReturnValue(mockRouter);
13:   });
14:   it('is hidden on home screen', () => {
15:     (usePathname as jest.Mock).mockReturnValue('/');
16:     const { container } = render(<TabBar />);
17:     expect(container.children).toHaveLength(0);
18:   });
19:   it('is visible on other screens', () => {
20:     (usePathname as jest.Mock).mockReturnValue('/history');
21:     const { getByTestId } = render(<TabBar />);
22:     expect(getByTestId('home-tab')).toBeTruthy();
23:   });
24:   it('navigates to home when home tab is pressed', () => {
25:     (usePathname as jest.Mock).mockReturnValue('/history');
26:     const { getByTestId } = render(<TabBar />);
27:     fireEvent.press(getByTestId('home-tab'));
28:     expect(mockRouter.push).toHaveBeenCalledWith('/');
29:   });
30: });
</file>

<file path="app/components/BigTextDisplay.tsx">
  1: import { useWindowDimensions, LayoutChangeEvent, Platform, Keyboard } from "react-native";
  2: import { TextInput, useTheme } from 'react-native-paper';
  3: import { useTranslation } from 'react-i18next';
  4: import { useState, useEffect, useCallback, useRef, useMemo } from "react";
  5: import { useIsMounted } from '../hooks/useIsMounted';
  6: import { useSettings } from '../context/SettingsContext';
  7: import { debounce } from 'lodash';
  8: type BigTextDisplayProps = {
  9:   text: string;
 10:   onChangeText: (text: string) => void;
 11:   maxFontSize?: number;
 12:   minFontSize?: number;
 13:   debounceMs?: number;
 14: };
 15: type ViewportSize = {
 16:   width: number;
 17:   height: number;
 18: };
 19: export default function BigTextDisplay({
 20:   text, 
 21:   onChangeText,
 22:   maxFontSize: propMaxFontSize,
 23:   minFontSize = 1,  // in vh units (3/4 of previous 1.3vh)
 24:   debounceMs = 150
 25: }: BigTextDisplayProps) {
 26:   const { startingFontSize } = useSettings();
 27:   const theme = useTheme();
 28:   const { t } = useTranslation();
 29:   const maxFontSize = propMaxFontSize ?? (startingFontSize / 2.4); // Convert px to vh units
 30:   const dimensions = useWindowDimensions();
 31:   const previousDimensions = useRef(dimensions);
 32:   const inputRef = useRef<TextInput>(null);
 33:   const isMounted = useIsMounted();
 34:   const abortControllerRef = useRef<AbortController>();
 35:   const [fontSize, setFontSize] = useState(maxFontSize);
 36:   const [containerSize, setContainerSize] = useState<ViewportSize>({ width: 0, height: 0 });
 37:   const [contentSize, setContentSize] = useState<ViewportSize>({ width: 0, height: 0 });
 38:   const [keyboardHeight, setKeyboardHeight] = useState(0);
 39:   const [keyboardVisible, setKeyboardVisible] = useState(false);
 40:   const [adjustedContainerHeight, setAdjustedContainerHeight] = useState(0);
 41:   const calculateAndSetFontSize = useCallback(() => {
 42:     try {
 43:       if (!containerSize.width || !adjustedContainerHeight) return;
 44:       // Reset to max size when text is empty or very short
 45:       if (text.length <= 1) {
 46:         setFontSize(maxFontSize);
 47:         return;
 48:       }
 49:       const hasOverflow = 
 50:         contentSize.height > adjustedContainerHeight ||
 51:         contentSize.width > containerSize.width;
 52:       if (hasOverflow && fontSize > minFontSize) {
 53:         setFontSize(current => Math.max(current - 0.5, minFontSize));
 54:       } else if (!hasOverflow && fontSize < maxFontSize) {
 55:         // More aggressive increase when text is deleted
 56:         const increaseFactor = text.length < 10 ? 2.0 : 0.5;
 57:         const nextSize = Math.min(fontSize + increaseFactor, maxFontSize);
 58:         const wouldOverflow = 
 59:           (contentSize.height * (nextSize / fontSize)) > adjustedContainerHeight ||
 60:           (contentSize.width * (nextSize / fontSize)) > containerSize.width;
 61:         if (!wouldOverflow) {
 62:           setFontSize(nextSize);
 63:         }
 64:       }
 65:     } catch (error) {
 66:       console.error('Error in font size calculation:', error);
 67:     }
 68:   }, [containerSize, contentSize, fontSize, maxFontSize, minFontSize, text, adjustedContainerHeight]);
 69:   const debouncedCalculate = useMemo(
 70:     () => debounce((
 71:       text: string,
 72:       containerSize: ViewportSize,
 73:       contentSize: ViewportSize,
 74:       adjustedContainerHeight: number
 75:     ) => {
 76:       if (isMounted() && !abortControllerRef.current?.signal.aborted) {
 77:         calculateAndSetFontSize();
 78:       }
 79:     }, debounceMs, { maxWait: debounceMs * 2 }),
 80:     [calculateAndSetFontSize, debounceMs, isMounted]
 81:   );
 82:   // Initialize AbortController
 83:   useEffect(() => {
 84:     abortControllerRef.current = new AbortController();
 85:     return () => {
 86:       abortControllerRef.current?.abort();
 87:     };
 88:   }, [debouncedCalculate]);
 89:   // Handle keyboard events and cleanup
 90:   useEffect(() => {
 91:     const abortController = new AbortController();
 92:     const showEvent = Platform.OS === 'ios' ? 'keyboardWillShow' : 'keyboardDidShow';
 93:     const hideEvent = Platform.OS === 'ios' ? 'keyboardWillHide' : 'keyboardDidHide';
 94:     const handleKeyboardShow = (e: any) => {
 95:       if (!abortController.signal.aborted && isMounted()) {
 96:         setKeyboardHeight(e.endCoordinates.height);
 97:         setKeyboardVisible(true);
 98:       }
 99:     };
100:     const handleKeyboardHide = () => {
101:       if (!abortController.signal.aborted && isMounted()) {
102:         setKeyboardHeight(0);
103:         setKeyboardVisible(false);
104:       }
105:     };
106:     const listeners = [
107:       Keyboard.addListener(showEvent, handleKeyboardShow),
108:       Keyboard.addListener(hideEvent, handleKeyboardHide)
109:     ];
110:     // Cleanup function
111:     return () => {
112:       abortController.abort();
113:       listeners.forEach(listener => listener.remove());
114:       debouncedCalculate.cancel();
115:     };
116:   }, [isMounted, debouncedCalculate]);
117:   const onLayout = useCallback((event: LayoutChangeEvent) => {
118:     const { width, height } = event.nativeEvent.layout;
119:     setContainerSize({ width, height });
120:     setAdjustedContainerHeight(height - keyboardHeight);
121:   }, [keyboardHeight]);
122:   const onContentSizeChange = useCallback((width: number, height: number) => {
123:     if (isMounted()) {
124:       setContentSize({ width, height });
125:     }
126:   }, [isMounted]);
127:   // Handle screen dimension changes
128:   useEffect(() => {
129:     if (!isMounted() || abortControllerRef.current?.signal.aborted) return;
130:     const handleDimensionChange = () => {
131:       const dimensionsChanged = 
132:         previousDimensions.current.width !== dimensions.width ||
133:         previousDimensions.current.height !== dimensions.height;
134:       if (dimensionsChanged && isMounted()) {
135:         setContainerSize({
136:           width: dimensions.width,
137:           height: dimensions.height
138:         });
139:         const adjustedHeight = dimensions.height - keyboardHeight;
140:         if (adjustedHeight > 0) {
141:           debouncedCalculate(
142:             text, 
143:             { width: dimensions.width, height: dimensions.height }, 
144:             contentSize, 
145:             adjustedHeight
146:           );
147:         }
148:         previousDimensions.current = dimensions;
149:       }
150:     };
151:     handleDimensionChange();
152:     return () => {
153:       debouncedCalculate.cancel();
154:     };
155:   }, [dimensions, keyboardHeight, text, contentSize, debouncedCalculate, isMounted]);
156:   // Handle font size calculations with error boundary
157:   useEffect(() => {
158:     try {
159:       debouncedCalculate(text, containerSize, contentSize, adjustedContainerHeight);
160:     } catch (error) {
161:       console.error('Error in font size calculation:', error);
162:       // Fallback to minimum font size on error
163:       setFontSize(minFontSize);
164:     }
165:     return () => {
166:       debouncedCalculate.cancel();
167:     };
168:   }, [text, containerSize, contentSize, adjustedContainerHeight, debouncedCalculate, minFontSize]);
169:   return (
170:     <TextInput
171:       ref={inputRef}
172:       testID="big-text-display"
173:       mode="flat"
174:       accessibilityLabel="Main text input"
175:       accessibilityHint="Enter your text here. Text will automatically resize to fit the screen"
176:       accessibilityRole="textbox"
177:       accessibilityState={{ 
178:         disabled: false,
179:         editable: true,
180:         multiline: true
181:       }}
182:       style={[
183:         {
184:           position: 'absolute',
185:           top: 0,
186:           left: 0,
187:           right: 0,
188:           bottom: 0,
189:           width: '100%',
190:           height: '100%',
191:           fontWeight: "bold",
192:           fontFamily: 'System',  // System font, similar to sans-serif
193:           color: theme.colors.onBackground,
194:           backgroundColor: theme.colors.background,
195:           textAlign: "left",
196:           padding: 20,
197:           paddingBottom: 50,
198:           margin: 0,
199:           zIndex: 10,
200:         },
201:         {
202:           fontSize: fontSize * (adjustedContainerHeight / 100),
203:           lineHeight: fontSize * (adjustedContainerHeight / 100) * 1.2,
204:           maxHeight: keyboardVisible ? `${100 - (keyboardHeight / dimensions.height * 100)}%` : '100%',
205:         }
206:       ]}
207:       value={text}
208:       onChangeText={onChangeText}
209:       multiline
210:       placeholder={t('typeHere')}
211:       placeholderTextColor={`${theme.colors.onBackground}66`} // Adding 66 for 40% opacity
212:       onLayout={onLayout}
213:       onContentSizeChange={(e) => {
214:         onContentSizeChange(e.nativeEvent.contentSize.width, e.nativeEvent.contentSize.height);
215:       }}
216:       autoCorrect={false}
217:       keyboardType={Platform.OS === 'ios' ? 'default' : 'visible-password'} // Prevents Android keyboard from jumping
218:     />
219:   );
220: }
</file>

<file path="app/components/BottomBar.tsx">
 1: import { StyleSheet, Platform, useWindowDimensions } from 'react-native';
 2: import { Surface, IconButton, useTheme } from 'react-native-paper';
 3: import { useTranslation } from 'react-i18next';
 4: type BottomBarProps = {
 5:     onClearPress: () => void;
 6:     onHistoryPress: () => void;
 7: };
 8: export default function BottomBar({ onClearPress, onHistoryPress }: BottomBarProps) {
 9:     const { t } = useTranslation();
10:     const theme = useTheme();
11:     const { width } = useWindowDimensions();
12:     // Only show on web platform and screens wider than 768px (tablet/desktop)
13:     if (Platform.OS !== 'web' || width < 768) {
14:         return null;
15:     }
16:     const styles = StyleSheet.create({
17:         container: {
18:             flexDirection: 'row',
19:             justifyContent: 'space-around',
20:             alignItems: 'center',
21:             height: 60,
22:             backgroundColor: theme.colors.background,
23:         },
24:     });
25:     return (
26:         <Surface style={styles.container} elevation={1}>
27:             <IconButton
28:                 icon="delete"
29:                 mode="contained"
30:                 onPress={onClearPress}
31:                 testID="clear-button"
32:                 accessibilityLabel={t('clearText')}
33:                 accessibilityHint={t('clearHint')}
34:                 accessibilityRole="button"
35:                 accessibilityState={{ disabled: false }}
36:                 accessible={true}
37:             />
38:             <IconButton
39:                 icon="history"
40:                 mode="contained"
41:                 onPress={onHistoryPress}
42:                 testID="history-button"
43:                 accessibilityLabel={t('showHistory')}
44:                 accessibilityHint={t('showHistoryHint')}
45:                 accessibilityRole="button"
46:                 accessibilityState={{ disabled: false }}
47:                 accessible={true}
48:             />
49:         </Surface>
50:     );
51: }
</file>

<file path="app/components/ErrorBoundary.tsx">
 1: import React from 'react';
 2: import { View, StyleSheet } from 'react-native';
 3: import { Text, Button } from 'react-native-paper';
 4: interface Props {
 5:   children: React.ReactNode;
 6: }
 7: interface State {
 8:   hasError: boolean;
 9:   error?: Error;
10: }
11: export class ErrorBoundary extends React.Component<Props, State> {
12:   constructor(props: Props) {
13:     super(props);
14:     this.state = { hasError: false };
15:   }
16:   static getDerivedStateFromError(error: Error): State {
17:     return { hasError: true, error };
18:   }
19:   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
20:     // Log to error reporting service
21:     console.error('Error caught by boundary:', error, errorInfo);
22:   }
23:   handleReset = () => {
24:     this.setState({ hasError: false, error: undefined });
25:   };
26:   render() {
27:     if (this.state.hasError) {
28:       return (
29:         <ErrorDisplay error={this.state.error} onReset={this.handleReset} />
30:       );
31:     }
32:     return this.props.children;
33:   }
34: }
35: interface ErrorDisplayProps {
36:   error?: Error;
37:   onReset: () => void;
38: }
39: function ErrorDisplay({ error, onReset }: ErrorDisplayProps) {
40:   return (
41:     <View 
42:       style={styles.container}
43:       accessibilityRole="alert"
44:       accessibilityLiveRegion="assertive"
45:     >
46:       <Text variant="headlineMedium" style={styles.title}>
47:         Something went wrong
48:       </Text>
49:       <Text variant="bodyLarge" style={styles.message}>
50:         {error?.message || 'An unexpected error occurred'}
51:       </Text>
52:       <Button 
53:         mode="contained"
54:         onPress={onReset}
55:         style={styles.button}
56:         accessibilityLabel="Try again"
57:         accessibilityHint="Attempts to recover from the error"
58:       >
59:         Try Again
60:       </Button>
61:     </View>
62:   );
63: }
64: const styles = StyleSheet.create({
65:   container: {
66:     flex: 1,
67:     justifyContent: 'center',
68:     alignItems: 'center',
69:     padding: 20,
70:   },
71:   title: {
72:     marginBottom: 16,
73:   },
74:   message: {
75:     textAlign: 'center',
76:     marginBottom: 24,
77:   },
78:   button: {
79:     minWidth: 120,
80:   },
81: });
</file>

<file path="app/components/HomeScreen.tsx">
  1: import {
  2:     StyleSheet,
  3:     Dimensions,
  4:     KeyboardAvoidingView,
  5:     Platform,
  6:     Animated,
  7: } from "react-native";
  8: import RNShake from 'react-native-shake';
  9: import { Surface, Snackbar } from 'react-native-paper';
 10: import BottomBar from "./BottomBar";
 11: import { useCallback, useEffect, useState } from "react";
 12: import { useSettings } from "../context/SettingsContext";
 13: import { useLocalSearchParams, router } from "expo-router";
 14: import { GestureDetector, Gesture } from "react-native-gesture-handler";
 15: import BigTextDisplay from "./BigTextDisplay";
 16: import { useText } from "../context/TextContext";
 17: import { AccessibilityInfo } from 'react-native';
 18: export default function HomeScreen() {
 19:     const { text, handleTextChange, restoreLastSession, error } = useText();
 20:     const announceError = useCallback((error: string) => {
 21:         AccessibilityInfo.announceForAccessibility(error);
 22:     }, []);
 23:     const { text: paramText } = useLocalSearchParams<{ text?: string }>();
 24:     const { shakeMode, currentTheme } = useSettings();
 25:     const [flashAnim] = useState(new Animated.Value(0));
 26:     useEffect(() => {
 27:         const initializeText = async () => {
 28:             try {
 29:                 if (paramText) {
 30:                     await handleTextChange(paramText);
 31:                 } else {
 32:                     await restoreLastSession();
 33:                 }
 34:             } catch (error) {
 35:                 console.error('Failed to initialize text:', error);
 36:             }
 37:         };
 38:         initializeText();
 39:     }, [paramText, handleTextChange, restoreLastSession]);
 40:     const { width, height } = Dimensions.get("window");
 41:     const SWIPE_THRESHOLD = width * 0.2; // 20% of screen width
 42:     const VERTICAL_THRESHOLD = height * 0.2; // 20% of screen height
 43:     const panGesture = Gesture.Pan()
 44:         .onFinalize((event) => {
 45:         const { translationX, translationY } = event;
 46:         // Horizontal swipes
 47:         if (Math.abs(translationX) > SWIPE_THRESHOLD && Math.abs(translationY) < 50) {
 48:             if (translationX < 0) {
 49:                 // Left swipe - clear text
 50:                 handleTextChange("");
 51:             } else {
 52:                 // Right swipe - show history
 53:                 router.push("/history");
 54:             }
 55:         }
 56:         // Up swipe - show history
 57:         if (translationY < -VERTICAL_THRESHOLD && Math.abs(translationX) < 50) {
 58:             router.push("/history");
 59:         }
 60:     });
 61:     const handleShake = useCallback(() => {
 62:         if (shakeMode === 'clear') {
 63:             handleTextChange("");
 64:         } else if (shakeMode === 'flash') {
 65:             Animated.sequence([
 66:                 Animated.timing(flashAnim, {
 67:                     toValue: 1,
 68:                     duration: 100,
 69:                     useNativeDriver: false,
 70:                 }),
 71:                 Animated.timing(flashAnim, {
 72:                     toValue: 0,
 73:                     duration: 900,
 74:                     useNativeDriver: false,
 75:                 })
 76:             ]).start();
 77:         }
 78:     }, [shakeMode, handleTextChange, flashAnim]);
 79:     useEffect(() => {
 80:         const subscription = RNShake.addListener(handleShake);
 81:         return () => {
 82:             subscription.remove();
 83:             handleTextChange("");
 84:         };
 85:     }, [handleShake, handleTextChange]);
 86:     const flashStyle = {
 87:         backgroundColor: flashAnim.interpolate({
 88:             inputRange: [0, 1],
 89:             outputRange: [currentTheme.colors.background, currentTheme.colors.onBackground]
 90:         }),
 91:     };
 92:     return (
 93:         <>
 94:             <Animated.View style={[StyleSheet.absoluteFill, flashStyle]} />
 95:             <KeyboardAvoidingView
 96:             behavior={Platform.OS === "ios" ? "padding" : "height"}
 97:             style={styles.container}
 98:             keyboardVerticalOffset={Platform.OS === "ios" ? 0 : 20}
 99:             contentContainerStyle={styles.keyboardAvoidingContent}
100:         >
101:             <Surface style={styles.contentContainer}>
102:                 <GestureDetector gesture={panGesture}>
103:                     <Surface style={styles.innerContainer}>
104:                         <BigTextDisplay
105:                             text={text}
106:                             onChangeText={handleTextChange}
107:                         />
108:                     </Surface>
109:                 </GestureDetector>
110:                 <BottomBar 
111:                     onClearPress={() => handleTextChange("")}
112:                     onHistoryPress={() => router.push("/history")}
113:                 />
114:             </Surface>
115:             <Snackbar
116:                 visible={!!error}
117:                 onDismiss={() => {}}
118:                 action={{
119:                     label: 'Dismiss',
120:                     onPress: () => {},
121:                 }}
122:                 accessibilityLiveRegion="polite"
123:                 accessibilityLabel={error || "Error message"}
124:                 onShow={() => error && announceError(error)}>
125:                 {error}
126:             </Snackbar>
127:             </KeyboardAvoidingView>
128:         </>
129:     );
130: }
131: const styles = StyleSheet.create({
132:     container: {
133:         flex: 1,
134:         backgroundColor: "#fff",
135:     },
136:     contentContainer: {
137:         flex: 1,
138:         display: 'flex',
139:         flexDirection: 'column',
140:     },
141:     innerContainer: {
142:         flex: 1,
143:         width: "100%",
144:     },
145:     keyboardAvoidingContent: {
146:         flex: 1,
147:     },
148: });
</file>

<file path="app/components/InstallPWA.tsx">
  1: import React, { useEffect, useState } from 'react';
  2: import { Button, Card, Text, IconButton, useTheme } from 'react-native-paper';
  3: import { Platform, View, StyleSheet, Linking } from 'react-native';
  4: interface BeforeInstallPromptEvent extends Event {
  5:   readonly platforms: string[];
  6:   prompt: () => Promise<void>;
  7:   userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;
  8: }
  9: export function InstallPWA() {
 10:   const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);
 11:   const [showInstallOption, setShowInstallOption] = useState(false);
 12:   const [browserType, setBrowserType] = useState<'standard' | 'ios-safari' | 'desktop-safari' | 'firefox' | 'unsupported'>('unsupported');
 13:   const [guideExpanded, setGuideExpanded] = useState(false);
 14:   const theme = useTheme();
 15:   useEffect(() => {
 16:     if (Platform.OS !== 'web') return;
 17:     // Detect browser type
 18:     const ua = window.navigator.userAgent;
 19:     const isIOS = /iPad|iPhone|iPod/.test(ua) && !window.MSStream;
 20:     const isSafari = /Safari/.test(ua) && !/Chrome/.test(ua);
 21:     const isFirefox = /Firefox/.test(ua);
 22:     if (isIOS && isSafari) {
 23:       setBrowserType('ios-safari');
 24:       setShowInstallOption(true);
 25:     } else if (!isIOS && isSafari) {
 26:       setBrowserType('desktop-safari');
 27:       setShowInstallOption(true);
 28:     } else if (isFirefox) {
 29:       setBrowserType('firefox');
 30:       setShowInstallOption(true);
 31:     } else {
 32:       setBrowserType('standard');
 33:       // For standard browsers, we'll wait for the beforeinstallprompt event
 34:     }
 35:     // Only set up the event listener for standard browsers
 36:     const handleBeforeInstallPrompt = (e: Event) => {
 37:       e.preventDefault();
 38:       setDeferredPrompt(e as BeforeInstallPromptEvent);
 39:       setShowInstallOption(true);
 40:     };
 41:     window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
 42:     // Detect if app is already installed
 43:     // Simple heuristic - not perfect, but provides a hint
 44:     if ('standalone' in window.navigator && (window.navigator as any).standalone === true) {
 45:       setShowInstallOption(false);
 46:     }
 47:     // Check if the app is already installed on Android
 48:     if (window.matchMedia('(display-mode: standalone)').matches) {
 49:       setShowInstallOption(false);
 50:     }
 51:     return () => {
 52:       window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
 53:     };
 54:   }, []);
 55:   const handleInstallClick = async () => {
 56:     if (browserType === 'standard' && deferredPrompt) {
 57:       try {
 58:         await deferredPrompt.prompt();
 59:         const { outcome } = await deferredPrompt.userChoice;
 60:         if (outcome === 'accepted') {
 61:           setShowInstallOption(false);
 62:         }
 63:       } catch (error) {
 64:         console.error('Installation failed:', error);
 65:       }
 66:       setDeferredPrompt(null);
 67:     } else {
 68:       // For non-standard browsers, toggle the installation guide
 69:       setGuideExpanded(!guideExpanded);
 70:     }
 71:   };
 72:   const handleLearnMore = () => {
 73:     Linking.openURL('https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Guides/Installing');
 74:   };
 75:   if (!showInstallOption || Platform.OS !== 'web') return null;
 76:   const renderInstallGuide = () => {
 77:     switch (browserType) {
 78:       case 'ios-safari':
 79:         return (
 80:           <>
 81:             <Text style={styles.guideTitle}>Install on iOS Safari:</Text>
 82:             <View style={styles.steps}>
 83:               <Text style={styles.step}>1. Tap the <IconButton icon="share" size={16} /> share button</Text>
 84:               <Text style={styles.step}>2. Scroll down and tap "Add to Home Screen"</Text>
 85:               <Text style={styles.step}>3. Tap "Add" in the top-right corner</Text>
 86:             </View>
 87:           </>
 88:         );
 89:       case 'desktop-safari':
 90:         return (
 91:           <>
 92:             <Text style={styles.guideTitle}>Install on macOS Safari:</Text>
 93:             <Text style={styles.note}>
 94:               Safari on macOS has limited PWA support. For the best experience, consider using Chrome or Edge.
 95:             </Text>
 96:           </>
 97:         );
 98:       case 'firefox':
 99:         return (
100:           <>
101:             <Text style={styles.guideTitle}>Install on Firefox:</Text>
102:             <View style={styles.steps}>
103:               <Text style={styles.step}>1. Click the ⋮ menu button</Text>
104:               <Text style={styles.step}>2. Select "Add to Home Screen" or "Install"</Text>
105:               <Text style={styles.note}>
106:                 Note: Firefox has varying levels of PWA support across versions
107:               </Text>
108:             </View>
109:           </>
110:         );
111:       default:
112:         return (
113:           <Text style={styles.note}>
114:             Your browser may not fully support installing web apps. For the best experience, try Chrome or Edge.
115:           </Text>
116:         );
117:     }
118:   };
119:   return (
120:     <Card style={styles.container}>
121:       <Card.Content>
122:         <Text variant="titleMedium">Install Orbiting</Text>
123:         <Text variant="bodyMedium" style={styles.description}>
124:           Install this app on your device for quick access and improved performance
125:         </Text>
126:         {guideExpanded && (
127:           <View style={styles.guideContainer}>
128:             {renderInstallGuide()}
129:             <Button
130:               mode="text"
131:               onPress={handleLearnMore}
132:               style={styles.learnMoreButton}
133:             >
134:               Learn more about PWAs
135:             </Button>
136:           </View>
137:         )}
138:       </Card.Content>
139:       <Card.Actions>
140:         <Button
141:           mode="contained"
142:           onPress={handleInstallClick}
143:           icon={browserType === 'standard' ? "download" : "information-outline"}
144:         >
145:           {browserType === 'standard' ? 'Install App' : 'How to Install'}
146:         </Button>
147:         {guideExpanded && (
148:           <Button
149:             mode="outlined"
150:             onPress={() => setGuideExpanded(false)}
151:             style={styles.closeButton}
152:           >
153:             Close
154:           </Button>
155:         )}
156:       </Card.Actions>
157:     </Card>
158:   );
159: }
160: const styles = StyleSheet.create({
161:   container: {
162:     marginTop: 16,
163:     marginBottom: 8,
164:   },
165:   description: {
166:     marginVertical: 8,
167:   },
168:   guideContainer: {
169:     marginTop: 16,
170:     padding: 12,
171:     backgroundColor: 'rgba(0,0,0,0.05)',
172:     borderRadius: 8,
173:   },
174:   guideTitle: {
175:     fontWeight: 'bold',
176:     marginBottom: 8,
177:   },
178:   steps: {
179:     marginTop: 8,
180:   },
181:   step: {
182:     marginBottom: 6,
183:     flexDirection: 'row',
184:     alignItems: 'center',
185:   },
186:   note: {
187:     fontStyle: 'italic',
188:     marginTop: 8,
189:     opacity: 0.8,
190:   },
191:   learnMoreButton: {
192:     marginTop: 12,
193:     alignSelf: 'flex-start',
194:   },
195:   closeButton: {
196:     marginLeft: 8,
197:   }
198: });
</file>

<file path="app/components/LanguageSelector.tsx">
 1: import React, { useState } from 'react';
 2: import { StyleSheet, View } from 'react-native';
 3: import { List, Menu, Text, useTheme } from 'react-native-paper';
 4: import { useTranslation } from 'react-i18next';
 5: import { SUPPORTED_LANGUAGES, LanguageCode, changeLanguage } from '../i18n/config';
 6: export function LanguageSelector() {
 7:   const { i18n, t } = useTranslation();
 8:   const [visible, setVisible] = useState(false);
 9:   const currentLanguage = i18n.language as LanguageCode;
10:   const theme = useTheme();
11:   const currentLang = SUPPORTED_LANGUAGES.find(lang => lang.code === currentLanguage);
12:   const handleLanguageChange = (language: LanguageCode) => {
13:     changeLanguage(language);
14:     setVisible(false);
15:   };
16:   return (
17:     <List.Section>
18:       <Menu
19:         visible={visible}
20:         onDismiss={() => setVisible(false)}
21:         anchor={
22:           <List.Item
23:             title={t('language')}
24:             description={currentLang ? `${currentLang.flag}  ${currentLang.label}` : ''}
25:             left={props => <List.Icon {...props} icon="translate" />}
26:             onPress={() => setVisible(true)}
27:             right={props => <List.Icon {...props} icon="chevron-down" />}
28:           />
29:         }
30:       >
31:         {SUPPORTED_LANGUAGES.map(({ code, label, flag }) => (
32:           <Menu.Item
33:             key={code}
34:             onPress={() => handleLanguageChange(code)}
35:             title={
36:               <View style={styles.menuItem}>
37:                 <Text>{flag}</Text>
38:                 <Text style={styles.menuText}>{label}</Text>
39:               </View>
40:             }
41:             leadingIcon={currentLanguage === code ? 'check' : undefined}
42:           />
43:         ))}
44:       </Menu>
45:     </List.Section>
46:   );
47: }
48: const styles = StyleSheet.create({
49:   menuItem: {
50:     flexDirection: 'row',
51:     alignItems: 'center',
52:     gap: 8,
53:   },
54:   menuText: {
55:     fontSize: 16,
56:   },
57: });
</file>

<file path="app/components/PageLayout.tsx">
  1: import React from "react";
  2: import { StyleSheet, View, ScrollView, ActivityIndicator } from "react-native";
  3: import { Surface, Text } from "react-native-paper";
  4: import TabBar from "./TabBar";
  5: // Simple error boundary
  6: class ErrorBoundary extends React.Component {
  7:     state = { hasError: false, error: null };
  8:     static getDerivedStateFromError(error) {
  9:         return { hasError: true, error };
 10:     }
 11:     render() {
 12:         if (this.state.hasError) {
 13:             return (
 14:                 <View style={styles.errorContainer}>
 15:                     <Text>Something went wrong</Text>
 16:                     <Text>{this.state.error?.message}</Text>
 17:                 </View>
 18:             );
 19:         }
 20:         return this.props.children;
 21:     }
 22: }
 23: interface PageLayoutProps {
 24:     children: React.ReactNode;
 25:     scrollable?: boolean;
 26:     loading?: boolean;
 27: }
 28: export default function PageLayout({
 29:     children,
 30:     scrollable = false,
 31:     loading = false,
 32: }: PageLayoutProps) {
 33:     const renderContent = () => {
 34:         const content = (
 35:             <View style={styles.contentWrapper}>
 36:                 {loading ? (
 37:                     <View style={styles.loadingContainer}>
 38:                         <ActivityIndicator size="large" />
 39:                     </View>
 40:                 ) : (
 41:                     <Surface style={styles.content}>{children}</Surface>
 42:                 )}
 43:             </View>
 44:         );
 45:         if (scrollable) {
 46:             return (
 47:                 <ScrollView
 48:                     style={styles.scrollView}
 49:                     contentContainerStyle={styles.scrollViewContent}
 50:                 >
 51:                     {content}
 52:                 </ScrollView>
 53:             );
 54:         }
 55:         return content;
 56:     };
 57:     return (
 58:         <ErrorBoundary>
 59:             <View style={styles.root}>
 60:                 <View style={styles.container}>
 61:                     <View style={styles.mainContent}>{renderContent()}</View>
 62:                     <View style={styles.tabBarContainer}>
 63:                         <TabBar />
 64:                     </View>
 65:                 </View>
 66:             </View>
 67:         </ErrorBoundary>
 68:     );
 69: }
 70: const styles = StyleSheet.create({
 71:     root: {
 72:         flex: 1,
 73:         width: "100%",
 74:         height: "100%",
 75:     },
 76:     container: {
 77:         flex: 1,
 78:         width: "100%",
 79:         height: "100%",
 80:         display: "flex",
 81:         flexDirection: "column",
 82:     },
 83:     mainContent: {
 84:         flex: 1,
 85:         width: "100%",
 86:     },
 87:     contentWrapper: {
 88:         flex: 1,
 89:         width: "100%",
 90:         height: "100%",
 91:     },
 92:     content: {
 93:         flex: 1,
 94:         width: "100%",
 95:         height: "100%",
 96:         padding: 20,
 97:     },
 98:     scrollView: {
 99:         flex: 1,
100:         width: "100%",
101:     },
102:     scrollViewContent: {
103:         flexGrow: 1,
104:     },
105:     loadingContainer: {
106:         flex: 1,
107:         justifyContent: "center",
108:         alignItems: "center",
109:     },
110:     errorContainer: {
111:         flex: 1,
112:         justifyContent: "center",
113:         alignItems: "center",
114:         padding: 20,
115:     },
116:     tabBarContainer: {
117:         width: "100%",
118:         borderTopWidth: 1,
119:         borderTopColor: "#e0e0e0",
120:     },
121: });
</file>

<file path="app/components/TabBar.tsx">
 1: import { useRouter, usePathname } from 'expo-router';
 2: import { BottomNavigation } from 'react-native-paper';
 3: import { View } from 'react-native';
 4: import { useTranslation } from 'react-i18next';
 5: export default function TabBar() {
 6:   const { t } = useTranslation();
 7:   const router = useRouter();
 8:   const pathname = usePathname();
 9:   const isVisible = pathname !== '/';
10:   if (!isVisible) {
11:     return null;
12:   }
13:   return (
14:     <BottomNavigation
15:       accessibilityRole="tablist"
16:       accessibilityLabel={t('mainNavigation')}
17:       navigationState={{
18:         index: ['/', '/history', '/help', '/settings', '/about'].indexOf(pathname),
19:         routes: [
20:           { 
21:             key: 'home', 
22:             title: t('home'), 
23:             focusedIcon: 'home', 
24:             unfocusedIcon: 'home-outline',
25:             accessibilityLabel: t('home'),
26:             accessibilityHint: t('homeHint')
27:           },
28:           { 
29:             key: 'history', 
30:             title: t('historyTab'), 
31:             focusedIcon: 'history', 
32:             unfocusedIcon: 'history',
33:             accessibilityLabel: t('historyTab'),
34:             accessibilityHint: t('historyHint')
35:           },
36:           { 
37:             key: 'help', 
38:             title: t('helpTab'), 
39:             focusedIcon: 'help-circle', 
40:             unfocusedIcon: 'help-circle-outline',
41:             accessibilityLabel: t('helpTab'),
42:             accessibilityHint: t('helpHint')
43:           },
44:           { 
45:             key: 'settings', 
46:             title: t('settingsTab'), 
47:             focusedIcon: 'cog', 
48:             unfocusedIcon: 'cog-outline',
49:             accessibilityLabel: t('settingsTab'),
50:             accessibilityHint: t('settingsHint')
51:           },
52:           { 
53:             key: 'about', 
54:             title: t('aboutTab'), 
55:             focusedIcon: 'information', 
56:             unfocusedIcon: 'information-outline',
57:             accessibilityLabel: t('aboutTab'),
58:             accessibilityHint: t('aboutHint')
59:           },
60:         ],
61:       }}
62:       renderScene={() => <View />}
63:       onIndexChange={(index) => {
64:         const route = ['/', '/history', '/help', '/settings', '/about'][index];
65:         router.push(route);
66:       }}
67:       onTabPress={({ route }) => {
68:         switch (route.key) {
69:           case 'home':
70:             router.push('/');
71:             break;
72:           case 'history':
73:             router.push('/history');
74:             break;
75:           case 'help':
76:             router.push('/help');
77:             break;
78:           case 'settings':
79:             router.push('/settings');
80:             break;
81:           case 'about':
82:             router.push('/about');
83:             break;
84:         }
85:       }}
86:     />
87:   );
88: }
</file>

<file path="app/components/WelcomeModal.tsx">
  1: import React, { useState, useEffect } from "react";
  2: import { Modal, Portal, Text, Button, useTheme } from "react-native-paper";
  3: import { StyleSheet, View, Platform, Linking } from "react-native";
  4: import Cookies from "js-cookie";
  5: import { useTranslation } from 'react-i18next';
  6: import { InstallPWA } from "./InstallPWA";
  7: const WELCOME_COOKIE = "orbiting-welcome-shown";
  8: export function WelcomeModal() {
  9:     const [visible, setVisible] = useState(false);
 10:     const theme = useTheme();
 11:     const { t } = useTranslation();
 12:     useEffect(() => {
 13:         if (Platform.OS === "web") {
 14:             try {
 15:                 const hasSeenWelcome = Cookies.get(WELCOME_COOKIE);
 16:                 if (!hasSeenWelcome) {
 17:                     setVisible(true);
 18:                 }
 19:             } catch (error) {
 20:                 console.error("Failed to check welcome cookie:", error);
 21:                 setVisible(true); // Show modal on error as fallback
 22:             }
 23:             // Check if the app is already installed on iOS
 24:             if ('standalone' in window.navigator && (window.navigator as any).standalone === true) {
 25:                 setVisible(false);
 26:             }
 27:             // Check if the app is already installed on Android
 28:             if (window.matchMedia('(display-mode: standalone)').matches) {
 29:                 setVisible(false);
 30:             }
 31:         }
 32:     }, []);
 33:     const hideModal = () => {
 34:         setVisible(false);
 35:         if (Platform.OS === "web") {
 36:             Cookies.set(WELCOME_COOKIE, "true", { expires: 365 });
 37:         }
 38:     };
 39:     const handleFeedbackPress = () => {
 40:         Linking.openURL("https://docs.google.com/forms/d/e/1FAIpQLSfkRKAA3BGZldZTnJmv2qAEuvVSwnRF4YSw_50jrBd69b1rzg/viewform");
 41:     };
 42:     const handleEmailPress = () => {
 43:         Linking.openURL("mailto:feedback@orbiting.com");
 44:     };
 45:     const styles = StyleSheet.create({
 46:         modalContainer: {
 47:             backgroundColor: theme.colors.background,
 48:             padding: 24,
 49:             margin: 20,
 50:             borderRadius: 8,
 51:             maxWidth: 600,
 52:             maxHeight: "90%",
 53:             alignSelf: "center",
 54:             overflow: "scroll",
 55:         },
 56:         title: {
 57:             fontSize: 28,
 58:             fontWeight: "bold",
 59:             marginBottom: 16,
 60:         },
 61:         subtitle: {
 62:             fontSize: 24,
 63:             fontWeight: "bold",
 64:             marginTop: 24,
 65:             marginBottom: 16,
 66:         },
 67:         content: {
 68:             fontSize: 16,
 69:             lineHeight: 24,
 70:             marginBottom: 8,
 71:         },
 72:         listItem: {
 73:             flexDirection: "row",
 74:             alignItems: "center",
 75:             marginBottom: 2,
 76:             paddingLeft: 16,
 77:         },
 78:         divider: {
 79:             height: 1,
 80:             backgroundColor: theme.colors.outline,
 81:             marginVertical: 8,
 82:         },
 83:         link: {
 84:             color: theme.colors.primary,
 85:             textDecorationLine: "underline",
 86:         },
 87:         buttonContainer: {
 88:             marginTop: 24,
 89:         },
 90:     });
 91:     return (
 92:         <Portal>
 93:             <Modal
 94:                 visible={visible}
 95:                 onDismiss={hideModal}
 96:                 contentContainerStyle={styles.modalContainer as any}
 97:             >
 98:                 <Text style={styles.title as any}>{t('welcomeToOrbiting')}</Text>
 99:                 <Text style={styles.content as any}>
100:                     {t('appDescription')}
101:                 </Text>
102:                 <Text style={styles.subtitle as any}>
103:                     {t('quickStartGuide')}
104:                 </Text>
105:                 <View style={styles.listItem as any}>
106:                     <Text style={styles.content as any}>
107:                         • {t('tapAndTypeDesc')}
108:                     </Text>
109:                 </View>
110:                 <View style={styles.listItem as any}>
111:                     <Text style={styles.content as any}>
112:                         • {t('swipeLeftDesc')} - {t('swipeLeft')}
113:                     </Text>
114:                 </View>
115:                 <View style={styles.listItem as any}>
116:                     <Text style={styles.content as any}>
117:                         • {t('swipeRightDesc')} - {t('swipeRight')}
118:                     </Text>
119:                 </View>
120:                 <View style={styles.listItem as any}>
121:                     <Text style={styles.content as any}>
122:                         • {t('swipeUpDesc')} - {t('swipeUp')}
123:                     </Text>
124:                 </View>
125:                 <View style={styles.listItem as any}>
126:                     <Text style={styles.content as any}>
127:                         • {t('crossPlatformDesc')}
128:                     </Text>
129:                 </View>
130:                 <View style={styles.divider as any} />
131:                 <Text style={styles.content as any}>
132:                     {t('feedbackText')}{" "}
133:                     <Text style={styles.link as any} onPress={handleFeedbackPress}>
134:                         {t('feedbackLink')}
135:                     </Text>
136:                     {t('feedbackTextContinue')}
137:                 </Text>
138:                 {Platform.OS === "web" && (
139:                     <Text style={styles.content as any}>
140:                         💡 {t('addToHomescreenDesc')}
141:                     </Text>
142:                 )}
143:                 <View style={styles.buttonContainer as any}>
144:                     <Button mode="contained" onPress={hideModal}>
145:                         {t('welcome')}
146:                     </Button>
147:                     {Platform.OS === "web" && <InstallPWA />}
148:                 </View>
149:             </Modal>
150:         </Portal>
151:     );
152: }
</file>

<file path="app/context/SettingsContext.tsx">
 1: import React, { createContext, useContext, useEffect, useState } from 'react';
 2: import { ColorSchemeName, useColorScheme as useDeviceColorScheme } from 'react-native';
 3: import { MD3Theme } from 'react-native-paper';
 4: import { loadSettings, saveSettings } from '../utils/settingsStorage';
 5: import { themes } from '../themes';
 6: export type ThemeType = 'classic' | 'ocean' | 'forest' | 'sunset' | 'mono' | 'neon' | 'contrast' | 'candy' | 'mint';
 7: export interface CustomTheme extends MD3Theme {
 8:   custom: {
 9:     tabBar: string;
10:     tabBarActive: string;
11:   }
12: }
13: interface Settings {
14:   colorScheme: ColorSchemeName | 'system';
15:   startingFontSize: number;
16:   theme: ThemeType;
17:   shakeMode: 'clear' | 'flash' | 'none';
18:   isInstalled?: boolean;
19: }
20: interface SettingsContextType extends Settings {
21:   updateSettings: (settings: Partial<Settings>) => void;
22:   resetSettings: () => void;
23:   currentTheme: CustomTheme;
24: }
25: const defaultSettings: Settings = {
26:   colorScheme: 'system',
27:   startingFontSize: 24,
28:   theme: 'mono',
29:   shakeMode: 'none',
30:   isInstalled: false,
31: };
32: const SettingsContext = createContext<SettingsContextType | undefined>(undefined);
33: export function SettingsProvider({ children }: { children: React.ReactNode }) {
34:   const deviceColorScheme = useDeviceColorScheme();
35:   const [settings, setSettings] = useState<Settings>(defaultSettings);
36:   useEffect(() => {
37:     loadSettings().then((savedSettings) => {
38:       if (savedSettings) {
39:         setSettings(savedSettings);
40:       }
41:     }).catch(err => {
42:       console.error('Failed to load settings:', err);
43:       setSettings(defaultSettings);
44:     });
45:   }, []);
46:   const updateSettings = async (newSettings: Partial<Settings>) => {
47:     const updatedSettings = { ...settings, ...newSettings };
48:     setSettings(updatedSettings);
49:     await saveSettings(updatedSettings);
50:   };
51:   const resetSettings = async () => {
52:     setSettings(defaultSettings);
53:     await saveSettings(defaultSettings);
54:   };
55:   const effectiveColorScheme = settings.colorScheme === 'system' 
56:     ? deviceColorScheme 
57:     : settings.colorScheme;
58:   const currentTheme = themes[settings.theme][effectiveColorScheme || 'light'];
59:   return (
60:     <SettingsContext.Provider
61:       value={{
62:         ...settings,
63:         updateSettings,
64:         resetSettings,
65:         currentTheme: currentTheme,
66:       }}
67:     >
68:       {children}
69:     </SettingsContext.Provider>
70:   );
71: }
72: export function useSettings() {
73:   const context = useContext(SettingsContext);
74:   if (context === undefined) {
75:     throw new Error('useSettings must be used within a SettingsProvider');
76:   }
77:   return context;
78: }
</file>

<file path="app/context/TextContext.tsx">
  1: import React, { createContext, useContext, useReducer, useCallback, useEffect, useRef } from 'react';
  2: import { storeMessage, getMessages } from '../utils/storageUtils';
  3: import { TextState, TextAction, textReducer, TEXT_ACTIONS } from './TextReducer';
  4: interface TextContextType {
  5:     text: string;
  6:     setText: (text: string) => void;
  7:     handleTextChange: (newText: string) => Promise<void>;
  8:     clearText: () => Promise<void>;
  9:     isDirty: boolean;
 10:     lastSaved: number | null;
 11:     restoreLastSession: () => Promise<void>;
 12:     error: string | null;
 13:     isLoading: boolean;
 14: }
 15: const TextContext = createContext<TextContextType | undefined>(undefined);
 16: const AUTOSAVE_DELAY = 1000; // 1 second
 17: function logStateChange(action: TextAction, prevState: TextState, nextState: TextState) {
 18:     if (process.env.NODE_ENV !== 'production') {
 19:         const stateChanges = Object.keys(nextState).reduce((changes: Record<string, any>, key) => {
 20:             if (prevState[key as keyof TextState] !== nextState[key as keyof TextState]) {
 21:                 changes[key] = {
 22:                     from: prevState[key as keyof TextState],
 23:                     to: nextState[key as keyof TextState]
 24:                 };
 25:             }
 26:             return changes;
 27:         }, {});
 28:         console.debug(
 29:             `[TextContext] ${action.type}:`,
 30:             '\n  Action:', action,
 31:             '\n  Changes:', stateChanges,
 32:             '\n  Timestamp:', new Date().toISOString()
 33:         );
 34:     }
 35: }
 36: export function TextProvider({ children }: { children: React.ReactNode }) {
 37:     const [state, dispatch] = useReducer(textReducer, {
 38:         text: "",
 39:         lastSaved: null,
 40:         isDirty: false,
 41:         error: null,
 42:         isLoading: false
 43:     });
 44:     const saveTimeoutRef = useRef<NodeJS.Timeout>();
 45:     // Autosave mechanism
 46:     useEffect(() => {
 47:         if (state.isDirty) {
 48:             if (saveTimeoutRef.current) {
 49:                 clearTimeout(saveTimeoutRef.current);
 50:             }
 51:             saveTimeoutRef.current = setTimeout(async () => {
 52:                 try {
 53:                     await storeMessage(state.text);
 54:                     const action = { type: TEXT_ACTIONS.TEXT_SAVED, payload: Date.now() };
 55:                     dispatch(action);
 56:                     logStateChange(action, state, textReducer(state, action));
 57:                 } catch (error) {
 58:                     const errorMessage = error instanceof Error ? error.message : 'Failed to autosave';
 59:                     dispatch({ 
 60:                         type: TEXT_ACTIONS.SET_ERROR, 
 61:                         payload: `Autosave failed: ${errorMessage}`
 62:                     });
 63:                     console.error('Autosave error:', error);
 64:                 }
 65:             }, AUTOSAVE_DELAY);
 66:         }
 67:         return () => {
 68:             if (saveTimeoutRef.current) {
 69:                 clearTimeout(saveTimeoutRef.current);
 70:             }
 71:         };
 72:     }, [state]);
 73:     const handleTextChange = useCallback(async (newText: string) => {
 74:         try {
 75:             dispatch({ type: TEXT_ACTIONS.SET_LOADING, payload: true });
 76:             dispatch({ 
 77:                 type: TEXT_ACTIONS.SET_TEXT, 
 78:                 payload: newText
 79:             });
 80:         } catch (_error) {
 81:             const errorMessage = _error instanceof Error ? _error.message : 'Failed to update text';
 82:             dispatch({ 
 83:                 type: TEXT_ACTIONS.SET_ERROR,
 84:                 payload: errorMessage
 85:             });
 86:             console.error('Text update error:', _error);
 87:         } finally {
 88:             dispatch({ type: TEXT_ACTIONS.SET_LOADING, payload: false });
 89:         }
 90:     }, []);
 91:     const clearText = useCallback(async () => {
 92:         try {
 93:             dispatch({ type: TEXT_ACTIONS.CLEAR_TEXT });
 94:         } catch (error) {
 95:             const errorMessage = error instanceof Error ? error.message : 'Unknown error';
 96:             dispatch({ 
 97:                 type: TEXT_ACTIONS.SET_ERROR,
 98:                 payload: `Failed to clear text: ${errorMessage}`
 99:             });
100:             console.error('Clear text error:', error);
101:         }
102:     }, []);
103:     const restoreLastSession = useCallback(async () => {
104:         try {
105:             const { messages } = await getMessages(0, 1);
106:             if (messages.length > 0) {
107:                 dispatch({ 
108:                     type: TEXT_ACTIONS.RESTORE_SESSION,
109:                     payload: messages[0]
110:                 });
111:             }
112:         } catch (_error) {
113:             const errorMessage = _error instanceof Error ? _error.message : 'Failed to restore session';
114:             dispatch({ 
115:                 type: TEXT_ACTIONS.SET_ERROR,
116:                 payload: errorMessage
117:             });
118:         }
119:     }, []);
120:     return (
121:         <TextContext.Provider value={{
122:             text: state.text,
123:             setText: useCallback((text: string) => {
124:                 dispatch({ type: TEXT_ACTIONS.SET_TEXT, payload: text });
125:             }, []),
126:             handleTextChange,
127:             clearText,
128:             isDirty: state.isDirty,
129:             lastSaved: state.lastSaved,
130:             restoreLastSession,
131:             error: state.error,
132:             isLoading: state.isLoading
133:         }}>
134:             {children}
135:         </TextContext.Provider>
136:     );
137: }
138: export function useText() {
139:     const context = useContext(TextContext);
140:     if (context === undefined) {
141:         throw new Error('useText must be used within a TextProvider');
142:     }
143:     return context;
144: }
</file>

<file path="app/context/TextReducer.ts">
 1: import { StoredMessage } from '../utils/storageUtils';
 2: export interface TextState {
 3:     text: string;
 4:     lastSaved: number | null;
 5:     isDirty: boolean;
 6:     error: string | null;
 7:     isLoading: boolean;
 8: }
 9: // Action type constants
10: export const TEXT_ACTIONS = {
11:     SET_TEXT: 'SET_TEXT',
12:     TEXT_SAVED: 'TEXT_SAVED',
13:     CLEAR_TEXT: 'CLEAR_TEXT',
14:     RESTORE_SESSION: 'RESTORE_SESSION',
15:     SET_ERROR: 'SET_ERROR',
16:     SET_LOADING: 'SET_LOADING',
17: } as const;
18: export type TextAction = 
19:     | { type: typeof TEXT_ACTIONS.SET_TEXT; payload: string }
20:     | { type: typeof TEXT_ACTIONS.TEXT_SAVED; payload: number }
21:     | { type: typeof TEXT_ACTIONS.CLEAR_TEXT }
22:     | { type: typeof TEXT_ACTIONS.RESTORE_SESSION; payload: StoredMessage }
23:     | { type: typeof TEXT_ACTIONS.SET_ERROR; payload: string }
24:     | { type: typeof TEXT_ACTIONS.SET_LOADING; payload: boolean };
25: export function textReducer(state: TextState, action: TextAction): TextState {
26:     switch (action.type) {
27:         case TEXT_ACTIONS.SET_TEXT:
28:             return {
29:                 ...state,
30:                 text: action.payload,
31:                 isDirty: true,
32:                 error: null
33:             };
34:         case TEXT_ACTIONS.TEXT_SAVED:
35:             return {
36:                 ...state,
37:                 lastSaved: action.payload,
38:                 isDirty: false,
39:                 error: null,
40:                 isLoading: false
41:             };
42:         case TEXT_ACTIONS.CLEAR_TEXT:
43:             return {
44:                 ...state,
45:                 text: '',
46:                 lastSaved: Date.now(),
47:                 isDirty: false,
48:                 error: null,
49:                 isLoading: false
50:             };
51:         case TEXT_ACTIONS.RESTORE_SESSION:
52:             return {
53:                 ...state,
54:                 text: action.payload.text,
55:                 lastSaved: action.payload.timestamp,
56:                 isDirty: false,
57:                 error: null,
58:                 isLoading: false
59:             };
60:         case TEXT_ACTIONS.SET_ERROR:
61:             return {
62:                 ...state,
63:                 error: action.payload,
64:                 isLoading: false
65:             };
66:         case TEXT_ACTIONS.SET_LOADING:
67:             return {
68:                 ...state,
69:                 isLoading: action.payload,
70:                 error: null
71:             };
72:         default: {
73:             const _exhaustiveCheck: never = action;
74:             void _exhaustiveCheck; // Explicitly mark as used
75:             return state;
76:         }
77:     }
78: }
</file>

<file path="app/hooks/useIsMounted.ts">
 1: import { useCallback, useEffect, useRef } from 'react';
 2: export function useIsMounted() {
 3:   const mountedRef = useRef(true);
 4:   useEffect(() => {
 5:     mountedRef.current = true;
 6:     return () => {
 7:       mountedRef.current = false;
 8:     };
 9:   }, []);
10:   return useCallback(() => mountedRef.current, []);
11: }
</file>

<file path="app/i18n/translations/bn.ts">
  1: export const bn = {
  2:     common: {
  3:         welcome: "স্বাগতম",
  4:         about: "সম্পর্কে",
  5:         settings: "সেটিংস",
  6:         help: "সাহায্য",
  7:         history: "ইতিহাস",
  8:         clear: "মুছুন",
  9:         save: "সংরক্ষণ করুন",
 10:         cancel: "বাতিল করুন",
 11:         delete: "মুছুন",
 12:         confirm: "নিশ্চিত করুন",
 13:         language: "ভাষা",
 14:         appearance: "চেহারা",
 15:         colorScheme: "রঙ স্কিম",
 16:         chooseColorScheme: "আপনার পছন্দের রঙ স্কিম বেছে নিন",
 17:         startingFontSize: "শুরুর ফন্ট সাইজ",
 18:         theme: "থিম",
 19:         chooseTheme: "আপনার পছন্দের থিম বেছে নিন",
 20:         gestures: "জেসচার",
 21:         shakeAction: "ঝাঁকানোর ক্রিয়া",
 22:         shakeDescription: "আপনার ডিভাইস ঝাঁকালে কী হবে তা বেছে নিন",
 23:         none: "কোনোটিই নয়",
 24:         clearText: "টেক্সট মুছুন",
 25:         clearTextDescription: "বর্তমান টেক্সট মুছতে ঝাঁকান",
 26:         flashScreen: "স্ক্রিন ফ্ল্যাশ",
 27:         flashScreenDescription: "স্ক্রিনের রং চমকাতে ঝাঁকান",
 28:         resetDefaults: "ডিফল্টে রিসেট করুন",
 29:         system: "সিস্টেম",
 30:         light: "হালকা",
 31:         dark: "গাঢ়",
 32:         // Navigation
 33:         home: "হোম",
 34:         homeHint: "প্রধান টেক্সট ইনপুট স্ক্রিনে যান",
 35:         historyTab: "ইতিহাস",
 36:         historyHint: "আপনার বার্তা ইতিহাস দেখুন",
 37:         helpTab: "সাহায্য",
 38:         helpHint: "অ্যাপ নির্দেশনা এবং সাহায্য দেখুন",
 39:         settingsTab: "সেটিংস",
 40:         settingsHint: "অ্যাপ পছন্দসমূহ এবং সেটিংস সমন্বয় করুন",
 41:         aboutTab: "সম্পর্কে",
 42:         aboutHint: "অ্যাপ তথ্য এবং ক্রেডিট দেখুন",
 43:         mainNavigation: "প্রধান নেভিগেশন",
 44:         // Actions
 45:         clearHint: "স্ক্রিন থেকে সমস্ত বর্তমান টেক্সট মুছে ফেলে",
 46:         showHistory: "ইতিহাস দেখান",
 47:         showHistoryHint: "বার্তা ইতিহাস স্ক্রিন খোলে",
 48:         // History Screen
 49:         searchMessages: "বার্তা খুঁজুন",
 50:         messagesWillAppearHere:
 51:             "আপনি যে বার্তাগুলি তৈরি করবেন তা এখানে প্রদর্শিত হবে",
 52:         clearAllHistory: "সমস্ত ইতিহাস মুছুন",
 53:         clearHistoryTitle: "ইতিহাস মুছুন",
 54:         clearHistoryConfirmMessage:
 55:             "এটি স্থায়ীভাবে সমস্ত বার্তা মুছে ফেলবে। আপনি কি নিশ্চিত?",
 56:         clearAll: "সব মুছুন",
 57:         deleteMessage: "বার্তা মুছুন",
 58:         deleteMessageConfirm: "আপনি কি নিশ্চিত যে আপনি এই বার্তাটি মুছতে চান?",
 59:         noMessages: "কোনো বার্তা নেই",
 60:         // Text Input
 61:         typeHere: "এখানে টাইপ করুন",
 62:         // Help Screen
 63:         welcomeToOrbiting: "Orbiting-এ স্বাগতম",
 64:         appDescription:
 65:             "আপনার চোখের জন্য একটি সহজ মেসেজিং অ্যাপ। আপনি আপনার আশেপাশের লোকেদের বার্তা টাইপ করে প্রদর্শন করতে এটি ব্যবহার করতে পারেন। একটি বার্তা স্পষ্ট এবং পরিষ্কারভাবে প্রদর্শন করুন।",
 66:         quickStartGuide: "দ্রুত শুরুর গাইড",
 67:         tapAndType: "✍️ ট্যাপ করুন এবং টাইপ করা শুরু করুন",
 68:         tapAndTypeDesc: "আপনার বার্তা স্পষ্ট ও পরিষ্কারভাবে প্রদর্শিত হবে!",
 69:         swipeLeft: "⬅️ বাম দিকে সোয়াইপ করুন",
 70:         swipeLeftDesc: "প্রদর্শন মুছতে",
 71:         swipeRight: "➡️ ডান দিকে সোয়াইপ করুন",
 72:         swipeRightDesc: "মেনু এবং সেটিংস দেখতে",
 73:         swipeUp: "⬆️ উপরে সোয়াইপ করুন",
 74:         swipeUpDesc: "ইতিহাস প্রদর্শন করতে",
 75:         crossPlatform: "📱 ক্রস-প্ল্যাটফর্ম",
 76:         crossPlatformDesc: "ডেস্কটপ এবং মোবাইল উভয়েতেই কাজ করে",
 77:         features: "বৈশিষ্ট্য",
 78:         autoScaling: "স্বয়ংক্রিয় টেক্সট আকার পরিবর্তন",
 79:         autoScalingDesc:
 80:             "টেক্সট স্ক্রিনে ফিট করার জন্য স্বয়ংক্রিয়ভাবে সমন্বয় করে",
 81:         messageHistory: "বার্তা ইতিহাস",
 82:         messageHistoryDesc: "আপনার আগের বার্তাগুলি সহজেই অ্যাক্সেস করুন",
 83:         autoSaving: "স্বয়ংক্রিয় সংরক্ষণ",
 84:         autoSavingDesc: "সমস্ত বার্তা স্বয়ংক্রিয়ভাবে সংরক্ষিত হয়",
 85:         proTips: "প্রো টিপস",
 86:         addToHomescreen: "হোম স্ক্রিনে যোগ করুন",
 87:         addToHomescreenDesc:
 88:             "যে কোনো সময় দ্রুত অ্যাক্সেসের জন্য অ্যাপ ইনস্টল করুন",
 89:         quickLoad: "দ্রুত লোড",
 90:         quickLoadDesc: "লোড করতে ইতিহাসে যে কোনো বার্তায় ট্যাপ করুন",
 91:         textWrapping: "টেক্সট র‍্যাপিং",
 92:         textWrappingDesc: "বার্তা স্বয়ংক্রিয়ভাবে স্পেসে র‍্যাপ হয়",
 93:         aboutText:
 94:             "Orbiting {{author1}} এবং {{author2}} দ্বারা তৈরি করা হয়েছে। এটি একই স্থানে থাকা কিন্তু ভিন্ন যোগাযোগ প্রয়োজন রয়েছে এমন লোকেদের সাথে যোগাযোগ করার প্রয়োজনীয়তা থেকে অনুপ্রাণিত হয়েছিল।",
 95:         feedbackText: "অনুগ্রহ করে আমাদের",
 96:         feedbackLink: "প্রতিক্রিয়া",
 97:         feedbackTextContinue: " পাঠান। আমরা এটি চাই! feedback@orbiting.com",
 98:         feedbackEmail: "feedback@orbiting.com",
 99:     },
100: };
</file>

<file path="app/i18n/translations/de.ts">
  1: export const de = {
  2:     common: {
  3:         welcome: "Willkommen",
  4:         about: "Über",
  5:         settings: "Einstellungen",
  6:         help: "Hilfe",
  7:         history: "Verlauf",
  8:         clear: "Löschen",
  9:         save: "Speichern",
 10:         cancel: "Abbrechen",
 11:         delete: "Löschen",
 12:         confirm: "Bestätigen",
 13:         language: "Sprache",
 14:         appearance: "Erscheinungsbild",
 15:         colorScheme: "Farbschema",
 16:         chooseColorScheme: "Wähle dein bevorzugtes Farbschema",
 17:         startingFontSize: "Anfängliche Schriftgröße",
 18:         theme: "Theme",
 19:         chooseTheme: "Wähle dein bevorzugtes Theme",
 20:         gestures: "Gesten",
 21:         shakeAction: "Schüttel-Aktion",
 22:         shakeDescription: "Wähle, was passiert, wenn du dein Gerät schüttelst",
 23:         none: "Keine",
 24:         clearText: "Text löschen",
 25:         clearTextDescription: "Schütteln, um den aktuellen Text zu löschen",
 26:         flashScreen: "Bildschirm aufleuchten",
 27:         flashScreenDescription:
 28:             "Schütteln, um die Bildschirmfarben aufleuchten zu lassen",
 29:         resetDefaults: "Auf Standardeinstellungen zurücksetzen",
 30:         system: "System",
 31:         light: "Hell",
 32:         dark: "Dunkel",
 33:         // Navigation
 34:         home: "Startseite",
 35:         homeHint: "Zum Haupttexteingabebildschirm navigieren",
 36:         historyTab: "Verlauf",
 37:         historyHint: "Nachrichtenverlauf anzeigen",
 38:         helpTab: "Hilfe",
 39:         helpHint: "App-Anleitung und Hilfe anzeigen",
 40:         settingsTab: "Einstellungen",
 41:         settingsHint: "App-Einstellungen anpassen",
 42:         aboutTab: "Über",
 43:         aboutHint: "App-Informationen und Credits anzeigen",
 44:         mainNavigation: "Hauptnavigation",
 45:         // Actions
 46:         clearHint: "Löscht den gesamten aktuellen Text vom Bildschirm",
 47:         showHistory: "Verlauf anzeigen",
 48:         showHistoryHint: "Öffnet den Nachrichtenverlauf",
 49:         // History Screen
 50:         searchMessages: "Nachrichten durchsuchen",
 51:         messagesWillAppearHere: "Erstellte Nachrichten werden hier angezeigt",
 52:         clearAllHistory: "Gesamten Verlauf löschen",
 53:         clearHistoryTitle: "Verlauf löschen",
 54:         clearHistoryConfirmMessage:
 55:             "Dies löscht alle Nachrichten dauerhaft. Bist du sicher?",
 56:         clearAll: "Alles löschen",
 57:         deleteMessage: "Nachricht löschen",
 58:         deleteMessageConfirm:
 59:             "Bist du sicher, dass du diese Nachricht löschen möchtest?",
 60:         noMessages: "Keine Nachrichten",
 61:         // Text Input
 62:         typeHere: "Hier tippen",
 63:         // Help Screen
 64:         welcomeToOrbiting: "Willkommen bei Orbiting",
 65:         appDescription:
 66:             "Eine einfache Messaging-App für deine Augen. Du kannst sie verwenden, um Nachrichten für Personen in deiner Umgebung zu tippen und anzuzeigen. Zeige eine Nachricht laut und deutlich an.",
 67:         quickStartGuide: "Schnellstartanleitung",
 68:         tapAndType: "✍️ Tippen und losschreiben",
 69:         tapAndTypeDesc: "Deine Nachricht wird laut und deutlich angezeigt!",
 70:         swipeLeft: "⬅️ Nach links wischen",
 71:         swipeLeftDesc: "Um die Anzeige zu löschen",
 72:         swipeRight: "➡️ Nach rechts wischen",
 73:         swipeRightDesc: "Um das Menü und die Einstellungen anzuzeigen",
 74:         swipeUp: "⬆️ Nach oben wischen",
 75:         swipeUpDesc: "Um den Verlauf anzuzeigen",
 76:         crossPlatform: "📱 Plattformübergreifend",
 77:         crossPlatformDesc:
 78:             "Funktioniert sowohl auf Desktop als auch auf Mobilgeräten",
 79:         features: "Funktionen",
 80:         autoScaling: "Automatische Textgrößenanpassung",
 81:         autoScalingDesc:
 82:             "Text passt sich automatisch an die Bildschirmgröße an",
 83:         messageHistory: "Nachrichtenverlauf",
 84:         messageHistoryDesc:
 85:             "Greife einfach auf deine vorherigen Nachrichten zu",
 86:         autoSaving: "Automatisches Speichern",
 87:         autoSavingDesc: "Alle Nachrichten werden automatisch gespeichert",
 88:         proTips: "Profi-Tipps",
 89:         addToHomescreen: "Zum Startbildschirm hinzufügen",
 90:         addToHomescreenDesc:
 91:             "Installiere die App für schnellen Zugriff jederzeit",
 92:         quickLoad: "Schnelles Laden",
 93:         quickLoadDesc: "Tippe auf eine Nachricht im Verlauf, um sie zu laden",
 94:         textWrapping: "Textumbruch",
 95:         textWrappingDesc:
 96:             "Nachrichten werden automatisch bei Leerzeichen umgebrochen",
 97:         aboutText:
 98:             "Orbiting wurde von {{author1}} und {{author2}} erstellt. Es wurde inspiriert von der Notwendigkeit, mit Menschen im gleichen Raum zu kommunizieren, die jedoch unterschiedliche Kommunikationsbedürfnisse haben.",
 99:         feedbackText: "Bitte sende uns",
100:         feedbackLink: "Feedback",
101:         feedbackTextContinue: ". Wir freuen uns darauf! feedback@orbiting.com",
102:         feedbackEmail: "feedback@orbiting.com",
103:     },
104: };
</file>

<file path="app/i18n/translations/en.ts">
 1: export const en = {
 2:   common: {
 3:     welcome: 'Welcome',
 4:     about: 'About',
 5:     settings: 'Settings',
 6:     help: 'Help',
 7:     history: 'History',
 8:     clear: 'Clear',
 9:     save: 'Save',
10:     cancel: 'Cancel',
11:     delete: 'Delete',
12:     confirm: 'Confirm',
13:     language: 'Language',
14:     appearance: 'Appearance',
15:     colorScheme: 'Color Scheme',
16:     chooseColorScheme: 'Choose your preferred color scheme',
17:     startingFontSize: 'Starting Font Size',
18:     theme: 'Theme',
19:     chooseTheme: 'Choose your preferred theme',
20:     gestures: 'Gestures',
21:     shakeAction: 'Shake Action',
22:     shakeDescription: 'Choose what happens when you shake your device',
23:     none: 'None',
24:     clearText: 'Clear Text',
25:     clearTextDescription: 'Shake to clear the current text',
26:     flashScreen: 'Flash Screen',
27:     flashScreenDescription: 'Shake to flash the screen colors',
28:     resetDefaults: 'Reset to Defaults',
29:     system: 'System',
30:     light: 'Light',
31:     dark: 'Dark',
32:     // Navigation
33:     home: 'Home',
34:     homeHint: 'Navigate to main text input screen',
35:     historyTab: 'History',
36:     historyHint: 'View your message history',
37:     helpTab: 'Help',
38:     helpHint: 'View app instructions and help',
39:     settingsTab: 'Settings',
40:     settingsHint: 'Adjust app preferences and settings',
41:     aboutTab: 'About',
42:     aboutHint: 'View app information and credits',
43:     mainNavigation: 'Main navigation',
44:     // Actions
45:     clearHint: 'Erases all current text from the screen',
46:     showHistory: 'Show history',
47:     showHistoryHint: 'Opens the message history screen',
48:     // History Screen
49:     searchMessages: 'Search messages',
50:     messagesWillAppearHere: 'Messages you create will appear here',
51:     clearAllHistory: 'Clear All History',
52:     clearHistoryTitle: 'Clear History',
53:     clearHistoryConfirmMessage: 'This will permanently delete all messages. Are you sure?',
54:     clearAll: 'Clear All',
55:     deleteMessage: 'Delete Message',
56:     deleteMessageConfirm: 'Are you sure you want to delete this message?',
57:     noMessages: 'No messages',
58:     allMessages: 'All Messages',
59:     favorites: 'Favorites',
60:     noFavorites: 'No favorite messages',
61:     addToFavorites: 'Add to favorites',
62:     removeFromFavorites: 'Remove from favorites',
63:     // Text Input
64:     typeHere: 'Type here',
65:     // Help Screen
66:     welcomeToOrbiting: 'Welcome to Orbiting',
67:     appDescription: 'A simple messaging app for your eyeballs. You can use it to type and display messages to those around you. Display a message loud and clear.',
68:     quickStartGuide: 'Quick Start Guide',
69:     tapAndType: '✍️ Tap and start typing',
70:     tapAndTypeDesc: 'Your message will display loud and clear!',
71:     swipeLeft: '⬅️ Swipe Left',
72:     swipeLeftDesc: 'To clear the display',
73:     swipeRight: '➡️ Swipe Right',
74:     swipeRightDesc: 'To view the menu and settings',
75:     swipeUp: '⬆️ Swipe Up',
76:     swipeUpDesc: 'To display the history',
77:     crossPlatform: '📱 Cross-Platform',
78:     crossPlatformDesc: 'Works on both desktop and mobile',
79:     features: 'Features',
80:     autoScaling: 'Auto-scaling text size',
81:     autoScalingDesc: 'Text automatically adjusts to fit the screen',
82:     messageHistory: 'Message history',
83:     messageHistoryDesc: 'Access your previous messages easily',
84:     autoSaving: 'Automatic saving',
85:     autoSavingDesc: 'All messages are saved automatically',
86:     proTips: 'Pro Tips',
87:     addToHomescreen: 'Add to Homescreen',
88:     addToHomescreenDesc: 'Install the app for quick access anytime',
89:     quickLoad: 'Quick Load',
90:     quickLoadDesc: 'Tap any message in History to load it',
91:     textWrapping: 'Text Wrapping',
92:     textWrappingDesc: 'Messages automatically wrap on whitespace',
93:     aboutText: 'Orbiting was created by {{author1}} and {{author2}}. It was inspired by the need to communicate with people in the same space, but with different communications needs.',
94:     feedbackText: 'Please send us',
95:     feedbackLink: 'feedback',
96:     feedbackTextContinue: '. We want it! feedback@orbiting.com',
97:     feedbackEmail: 'feedback@orbiting.com'
98:   }
99: };
</file>

<file path="app/i18n/translations/es.ts">
 1: export const es = {
 2:   common: {
 3:     welcome: 'Bienvenido',
 4:     about: 'Acerca de',
 5:     settings: 'Ajustes',
 6:     help: 'Ayuda',
 7:     history: 'Historial',
 8:     clear: 'Limpiar',
 9:     save: 'Guardar',
10:     cancel: 'Cancelar',
11:     delete: 'Eliminar',
12:     confirm: 'Confirmar',
13:     language: 'Idioma',
14:     appearance: 'Apariencia',
15:     colorScheme: 'Esquema de color',
16:     chooseColorScheme: 'Elige tu esquema de color preferido',
17:     startingFontSize: 'Tamaño de fuente inicial',
18:     theme: 'Tema',
19:     chooseTheme: 'Elige tu tema preferido',
20:     gestures: 'Gestos',
21:     shakeAction: 'Acción al agitar',
22:     shakeDescription: 'Elige qué sucede cuando agitas tu dispositivo',
23:     none: 'Ninguno',
24:     clearText: 'Borrar texto',
25:     clearTextDescription: 'Agita para borrar el texto actual',
26:     flashScreen: 'Destello de pantalla',
27:     flashScreenDescription: 'Agita para hacer destellar los colores de la pantalla',
28:     resetDefaults: 'Restablecer valores predeterminados',
29:     system: 'Sistema',
30:     light: 'Claro',
31:     dark: 'Oscuro',
32:     // Navigation
33:     home: 'Inicio',
34:     homeHint: 'Ir a la pantalla principal de entrada de texto',
35:     historyTab: 'Historial',
36:     historyHint: 'Ver historial de mensajes',
37:     helpTab: 'Ayuda',
38:     helpHint: 'Ver instrucciones y ayuda',
39:     settingsTab: 'Ajustes',
40:     settingsHint: 'Ajustar preferencias y configuración',
41:     aboutTab: 'Acerca de',
42:     aboutHint: 'Ver información y créditos',
43:     mainNavigation: 'Navegación principal',
44:     // Actions
45:     clearHint: 'Borra todo el texto actual de la pantalla',
46:     showHistory: 'Mostrar historial',
47:     showHistoryHint: 'Abre la pantalla de historial de mensajes',
48:     // History Screen
49:     searchMessages: 'Buscar mensajes',
50:     messagesWillAppearHere: 'Los mensajes que crees aparecerán aquí',
51:     clearAllHistory: 'Borrar todo el historial',
52:     clearHistoryTitle: 'Borrar historial',
53:     clearHistoryConfirmMessage: 'Esto eliminará permanentemente todos los mensajes. ¿Estás seguro?',
54:     clearAll: 'Borrar todo',
55:     deleteMessage: 'Eliminar mensaje',
56:     deleteMessageConfirm: '¿Estás seguro de que quieres eliminar este mensaje?',
57:     noMessages: 'No hay mensajes',
58:     // Text Input
59:     typeHere: 'Escribe aquí',
60:     // Help Screen
61:     welcomeToOrbiting: 'Bienvenido a Orbiting',
62:     appDescription: 'Una aplicación de mensajería simple para tus ojos. Puedes usarla para escribir y mostrar mensajes a quienes te rodean. Muestra un mensaje alto y claro.',
63:     quickStartGuide: 'Guía de inicio rápido',
64:     tapAndType: '✍️ Toca y empieza a escribir',
65:     tapAndTypeDesc: '¡Tu mensaje se mostrará alto y claro!',
66:     swipeLeft: '⬅️ Desliza a la izquierda',
67:     swipeLeftDesc: 'Para limpiar la pantalla',
68:     swipeRight: '➡️ Desliza a la derecha',
69:     swipeRightDesc: 'Para ver el menú y la configuración',
70:     swipeUp: '⬆️ Desliza hacia arriba',
71:     swipeUpDesc: 'Para mostrar el historial',
72:     crossPlatform: '📱 Multiplataforma',
73:     crossPlatformDesc: 'Funciona tanto en escritorio como en móvil',
74:     features: 'Características',
75:     autoScaling: 'Tamaño de texto automático',
76:     autoScalingDesc: 'El texto se ajusta automáticamente para adaptarse a la pantalla',
77:     messageHistory: 'Historial de mensajes',
78:     messageHistoryDesc: 'Accede fácilmente a tus mensajes anteriores',
79:     autoSaving: 'Guardado automático',
80:     autoSavingDesc: 'Todos los mensajes se guardan automáticamente',
81:     proTips: 'Consejos Pro',
82:     addToHomescreen: 'Añadir a la pantalla de inicio',
83:     addToHomescreenDesc: 'Instala la aplicación para acceder rápidamente',
84:     quickLoad: 'Carga rápida',
85:     quickLoadDesc: 'Toca cualquier mensaje en el Historial para cargarlo',
86:     textWrapping: 'Ajuste de texto',
87:     textWrappingDesc: 'Los mensajes se ajustan automáticamente en los espacios',
88:     aboutText: 'Orbiting fue creado por {{author1}} y {{author2}}. Se inspiró en la necesidad de comunicarse con personas en el mismo espacio, pero con diferentes necesidades de comunicación.',
89:     feedbackText: 'Por favor, envíanos tus',
90:     feedbackLink: 'comentarios',
91:     feedbackTextContinue: '. ¡Los queremos! feedback@orbiting.com',
92:     feedbackEmail: 'feedback@orbiting.com'
93:   }
94: };
</file>

<file path="app/i18n/translations/fr.ts">
  1: export const fr = {
  2:     common: {
  3:         welcome: "Bienvenue",
  4:         about: "À propos",
  5:         settings: "Paramètres",
  6:         help: "Aide",
  7:         history: "Historique",
  8:         clear: "Effacer",
  9:         save: "Enregistrer",
 10:         cancel: "Annuler",
 11:         delete: "Supprimer",
 12:         confirm: "Confirmer",
 13:         language: "Langue",
 14:         appearance: "Apparence",
 15:         colorScheme: "Thème de couleur",
 16:         chooseColorScheme: "Choisissez votre thème de couleur préféré",
 17:         startingFontSize: "Taille de police initiale",
 18:         theme: "Thème",
 19:         chooseTheme: "Choisissez votre thème préféré",
 20:         gestures: "Gestes",
 21:         shakeAction: "Action de secousse",
 22:         shakeDescription:
 23:             "Choisissez ce qui se passe lorsque vous secouez votre appareil",
 24:         none: "Aucun",
 25:         clearText: "Effacer le texte",
 26:         clearTextDescription: "Secouez pour effacer le texte actuel",
 27:         flashScreen: "Faire clignoter l'écran",
 28:         flashScreenDescription:
 29:             "Secouez pour faire clignoter les couleurs de l'écran",
 30:         resetDefaults: "Réinitialiser aux valeurs par défaut",
 31:         system: "Système",
 32:         light: "Clair",
 33:         dark: "Sombre",
 34:         // Navigation
 35:         home: "Accueil",
 36:         homeHint: "Naviguer vers l'écran principal de saisie de texte",
 37:         historyTab: "Historique",
 38:         historyHint: "Voir votre historique de messages",
 39:         helpTab: "Aide",
 40:         helpHint: "Voir les instructions et l'aide de l'application",
 41:         settingsTab: "Paramètres",
 42:         settingsHint:
 43:             "Ajuster les préférences et les paramètres de l'application",
 44:         aboutTab: "À propos",
 45:         aboutHint: "Voir les informations et les crédits de l'application",
 46:         mainNavigation: "Navigation principale",
 47:         // Actions
 48:         clearHint: "Efface tout le texte actuel de l'écran",
 49:         showHistory: "Afficher l'historique",
 50:         showHistoryHint: "Ouvre l'écran d'historique des messages",
 51:         // History Screen
 52:         searchMessages: "Rechercher des messages",
 53:         messagesWillAppearHere: "Les messages que vous créez apparaîtront ici",
 54:         clearAllHistory: "Effacer tout l'historique",
 55:         clearHistoryTitle: "Effacer l'historique",
 56:         clearHistoryConfirmMessage:
 57:             "Cela supprimera définitivement tous les messages. Êtes-vous sûr ?",
 58:         clearAll: "Tout effacer",
 59:         deleteMessage: "Supprimer le message",
 60:         deleteMessageConfirm: "Êtes-vous sûr de vouloir supprimer ce message ?",
 61:         noMessages: "Pas de messages",
 62:         // Text Input
 63:         typeHere: "Écrivez ici",
 64:         // Help Screen
 65:         welcomeToOrbiting: "Bienvenue sur Orbiting",
 66:         appDescription:
 67:             "Une application de messagerie simple pour vos yeux. Vous pouvez l'utiliser pour taper et afficher des messages à ceux qui vous entourent. Affichez un message haut et clair.",
 68:         quickStartGuide: "Guide de démarrage rapide",
 69:         tapAndType: "✍️ Tapez et commencez à écrire",
 70:         tapAndTypeDesc: "Votre message s'affichera haut et clair !",
 71:         swipeLeft: "⬅️ Glissez vers la gauche",
 72:         swipeLeftDesc: "Pour effacer l'affichage",
 73:         swipeRight: "➡️ Glissez vers la droite",
 74:         swipeRightDesc: "Pour afficher le menu et les paramètres",
 75:         swipeUp: "⬆️ Glissez vers le haut",
 76:         swipeUpDesc: "Pour afficher l'historique",
 77:         crossPlatform: "📱 Multi-plateforme",
 78:         crossPlatformDesc: "Fonctionne à la fois sur ordinateur et sur mobile",
 79:         features: "Fonctionnalités",
 80:         autoScaling: "Taille de texte auto-adaptative",
 81:         autoScalingDesc:
 82:             "Le texte s'ajuste automatiquement pour s'adapter à l'écran",
 83:         messageHistory: "Historique des messages",
 84:         messageHistoryDesc: "Accédez facilement à vos messages précédents",
 85:         autoSaving: "Sauvegarde automatique",
 86:         autoSavingDesc: "Tous les messages sont enregistrés automatiquement",
 87:         proTips: "Astuces pro",
 88:         addToHomescreen: "Ajouter à l'écran d'accueil",
 89:         addToHomescreenDesc:
 90:             "Installez l'application pour un accès rapide à tout moment",
 91:         quickLoad: "Chargement rapide",
 92:         quickLoadDesc:
 93:             "Tapez sur n'importe quel message dans l'Historique pour le charger",
 94:         textWrapping: "Retour à la ligne",
 95:         textWrappingDesc:
 96:             "Les messages reviennent automatiquement à la ligne aux espaces",
 97:         aboutText:
 98:             "Orbiting a été créé par {{author1}} et {{author2}}. Il a été inspiré par le besoin de communiquer avec des personnes dans le même espace, mais ayant des besoins de communication différents.",
 99:         feedbackText: "Veuillez nous envoyer vos",
100:         feedbackLink: "commentaires",
101:         feedbackTextContinue: ". Nous les voulons ! feedback@orbiting.com",
102:         feedbackEmail: "feedback@orbiting.com",
103:     },
104: };
</file>

<file path="app/i18n/translations/hi.ts">
 1: export const hi = {
 2:   common: {
 3:     welcome: 'स्वागत है',
 4:     about: 'बारे में',
 5:     settings: 'सेटिंग्स',
 6:     help: 'मदद',
 7:     history: 'इतिहास',
 8:     clear: 'मिटाएँ',
 9:     save: 'सहेजें',
10:     cancel: 'रद्द करें',
11:     delete: 'हटाएँ',
12:     confirm: 'पुष्टि करें',
13:     language: 'भाषा',
14:     appearance: 'दिखावट',
15:     colorScheme: 'रंग योजना',
16:     chooseColorScheme: 'अपनी पसंदीदा रंग योजना चुनें',
17:     startingFontSize: 'प्रारंभिक फॉन्ट आकार',
18:     theme: 'थीम',
19:     chooseTheme: 'अपनी पसंदीदा थीम चुनें',
20:     gestures: 'जेस्चर',
21:     shakeAction: 'हिलाने पर क्रिया',
22:     shakeDescription: 'जब आप अपने डिवाइस को हिलाते हैं, तो क्या होगा, चुनें',
23:     none: 'कोई नहीं',
24:     clearText: 'टेक्स्ट मिटाएँ',
25:     clearTextDescription: 'वर्तमान टेक्स्ट मिटाने के लिए हिलाएँ',
26:     flashScreen: 'स्क्रीन चमकाएँ',
27:     flashScreenDescription: 'स्क्रीन के रंगों को चमकाने के लिए हिलाएँ',
28:     resetDefaults: 'डिफॉल्ट पर रीसेट करें',
29:     system: 'सिस्टम',
30:     light: 'हल्का',
31:     dark: 'गहरा',
32:     // Navigation
33:     home: 'होम',
34:     homeHint: 'मुख्य टेक्स्ट इनपुट स्क्रीन पर जाएँ',
35:     historyTab: 'इतिहास',
36:     historyHint: 'अपना संदेश इतिहास देखें',
37:     helpTab: 'मदद',
38:     helpHint: 'ऐप निर्देश और मदद देखें',
39:     settingsTab: 'सेटिंग्स',
40:     settingsHint: 'ऐप प्राथमिकताएँ और सेटिंग्स समायोजित करें',
41:     aboutTab: 'बारे में',
42:     aboutHint: 'ऐप जानकारी और क्रेडिट देखें',
43:     mainNavigation: 'मुख्य नेविगेशन',
44:     // Actions
45:     clearHint: 'स्क्रीन से सभी वर्तमान टेक्स्ट मिटाता है',
46:     showHistory: 'इतिहास दिखाएँ',
47:     showHistoryHint: 'संदेश इतिहास स्क्रीन खोलता है',
48:     // History Screen
49:     searchMessages: 'संदेश खोजें',
50:     messagesWillAppearHere: 'आपके द्वारा बनाए गए संदेश यहाँ दिखाई देंगे',
51:     clearAllHistory: 'सभी इतिहास मिटाएँ',
52:     clearHistoryTitle: 'इतिहास मिटाएँ',
53:     clearHistoryConfirmMessage: 'यह स्थायी रूप से सभी संदेशों को हटा देगा। क्या आप सुनिश्चित हैं?',
54:     clearAll: 'सभी मिटाएँ',
55:     deleteMessage: 'संदेश हटाएँ',
56:     deleteMessageConfirm: 'क्या आप सुनिश्चित हैं कि आप इस संदेश को हटाना चाहते हैं?',
57:     noMessages: 'कोई संदेश नहीं',
58:     // Text Input
59:     typeHere: 'यहाँ टाइप करें',
60:     // Help Screen
61:     welcomeToOrbiting: 'Orbiting में आपका स्वागत है',
62:     appDescription: 'आपकी आँखों के लिए एक सरल मैसेजिंग ऐप। आप इसका उपयोग अपने आसपास के लोगों के लिए संदेश टाइप करने और प्रदर्शित करने के लिए कर सकते हैं। एक संदेश को स्पष्ट और साफ़ प्रदर्शित करें।',
63:     quickStartGuide: 'त्वरित प्रारंभ गाइड',
64:     tapAndType: '✍️ टैप करें और टाइप करना शुरू करें',
65:     tapAndTypeDesc: 'आपका संदेश स्पष्ट और साफ़ प्रदर्शित होगा!',
66:     swipeLeft: '⬅️ बाएँ स्वाइप करें',
67:     swipeLeftDesc: 'डिस्प्ले को साफ़ करने के लिए',
68:     swipeRight: '➡️ दाएँ स्वाइप करें',
69:     swipeRightDesc: 'मेनू और सेटिंग्स देखने के लिए',
70:     swipeUp: '⬆️ ऊपर स्वाइप करें',
71:     swipeUpDesc: 'इतिहास प्रदर्शित करने के लिए',
72:     crossPlatform: '📱 क्रॉस-प्लेटफॉर्म',
73:     crossPlatformDesc: 'डेस्कटॉप और मोबाइल दोनों पर काम करता है',
74:     features: 'विशेषताएँ',
75:     autoScaling: 'स्वचालित टेक्स्ट आकार समायोजन',
76:     autoScalingDesc: 'टेक्स्ट स्क्रीन पर फिट होने के लिए स्वचालित रूप से समायोजित होता है',
77:     messageHistory: 'संदेश इतिहास',
78:     messageHistoryDesc: 'अपने पिछले संदेशों तक आसानी से पहुँचें',
79:     autoSaving: 'स्वचालित सहेजना',
80:     autoSavingDesc: 'सभी संदेश स्वचालित रूप से सहेजे जाते हैं',
81:     proTips: 'प्रो टिप्स',
82:     addToHomescreen: 'होम स्क्रीन में जोड़ें',
83:     addToHomescreenDesc: 'किसी भी समय त्वरित पहुँच के लिए ऐप इंस्टॉल करें',
84:     quickLoad: 'त्वरित लोड',
85:     quickLoadDesc: 'इतिहास में किसी भी संदेश पर टैप करके उसे लोड करें',
86:     textWrapping: 'टेक्स्ट रैपिंग',
87:     textWrappingDesc: 'संदेश स्वचालित रूप से खाली स्थान पर रैप हो जाते हैं',
88:     aboutText: 'Orbiting {{author1}} और {{author2}} द्वारा बनाया गया था। यह एक ही स्थान में, लेकिन अलग-अलग संचार आवश्यकताओं वाले लोगों के साथ संवाद करने की आवश्यकता से प्रेरित था।',
89:     feedbackText: 'कृपया हमें',
90:     feedbackLink: 'प्रतिक्रिया',
91:     feedbackTextContinue: ' भेजें। हम इसे चाहते हैं! feedback@orbiting.com',
92:     feedbackEmail: 'feedback@orbiting.com'
93:   }
94: };
</file>

<file path="app/i18n/translations/id.ts">
 1: export const id = {
 2:     common: {
 3:         welcome: "Selamat Datang",
 4:         about: "Tentang",
 5:         settings: "Pengaturan",
 6:         help: "Bantuan",
 7:         history: "Riwayat",
 8:         clear: "Hapus",
 9:         save: "Simpan",
10:         cancel: "Batal",
11:         delete: "Hapus",
12:         confirm: "Konfirmasi",
13:         language: "Bahasa",
14:         appearance: "Tampilan",
15:         colorScheme: "Skema Warna",
16:         chooseColorScheme: "Pilih skema warna yang Anda sukai",
17:         startingFontSize: "Ukuran Font Awal",
18:         theme: "Tema",
19:         chooseTheme: "Pilih tema yang Anda sukai",
20:         gestures: "Gerakan",
21:         shakeAction: "Aksi Goyangan",
22:         shakeDescription:
23:             "Pilih apa yang terjadi saat Anda menggoyangkan perangkat",
24:         none: "Tidak ada",
25:         clearText: "Hapus Teks",
26:         clearTextDescription: "Goyangkan untuk menghapus teks saat ini",
27:         flashScreen: "Kedipkan Layar",
28:         flashScreenDescription: "Goyangkan untuk membuat warna layar berkedip",
29:         resetDefaults: "Kembalikan ke Pengaturan Awal",
30:         system: "Sistem",
31:         light: "Terang",
32:         dark: "Gelap",
33:         // Navigation
34:         home: "Beranda",
35:         homeHint: "Navigasi ke layar input teks utama",
36:         historyTab: "Riwayat",
37:         historyHint: "Lihat riwayat pesan Anda",
38:         helpTab: "Bantuan",
39:         helpHint: "Lihat petunjuk dan bantuan aplikasi",
40:         settingsTab: "Pengaturan",
41:         settingsHint: "Sesuaikan preferensi dan pengaturan aplikasi",
42:         aboutTab: "Tentang",
43:         aboutHint: "Lihat informasi dan kredit aplikasi",
44:         mainNavigation: "Navigasi utama",
45:         // Actions
46:         clearHint: "Menghapus semua teks saat ini dari layar",
47:         showHistory: "Tampilkan riwayat",
48:         showHistoryHint: "Membuka layar riwayat pesan",
49:         // History Screen
50:         searchMessages: "Cari pesan",
51:         messagesWillAppearHere: "Pesan yang Anda buat akan muncul di sini",
52:         clearAllHistory: "Hapus Semua Riwayat",
53:         clearHistoryTitle: "Hapus Riwayat",
54:         clearHistoryConfirmMessage:
55:             "Ini akan menghapus semua pesan secara permanen. Apakah Anda yakin?",
56:         clearAll: "Hapus Semua",
57:         deleteMessage: "Hapus Pesan",
58:         deleteMessageConfirm: "Apakah Anda yakin ingin menghapus pesan ini?",
59:         noMessages: "Tidak ada pesan",
60:         // Text Input
61:         typeHere: "Ketik di sini",
62:         // Help Screen
63:         welcomeToOrbiting: "Selamat Datang di Orbiting",
64:         appDescription:
65:             "Aplikasi pesan sederhana untuk mata Anda. Anda dapat menggunakannya untuk mengetik dan menampilkan pesan kepada orang-orang di sekitar Anda. Tampilkan pesan dengan jelas dan tegas.",
66:         quickStartGuide: "Panduan Mulai Cepat",
67:         tapAndType: "✍️ Ketuk dan mulai mengetik",
68:         tapAndTypeDesc: "Pesan Anda akan ditampilkan dengan jelas dan tegas!",
69:         swipeLeft: "⬅️ Geser ke Kiri",
70:         swipeLeftDesc: "Untuk menghapus tampilan",
71:         swipeRight: "➡️ Geser ke Kanan",
72:         swipeRightDesc: "Untuk melihat menu dan pengaturan",
73:         swipeUp: "⬆️ Geser ke Atas",
74:         swipeUpDesc: "Untuk menampilkan riwayat",
75:         crossPlatform: "📱 Lintas Platform",
76:         crossPlatformDesc: "Berfungsi baik di desktop maupun perangkat mobile",
77:         features: "Fitur",
78:         autoScaling: "Ukuran teks otomatis",
79:         autoScalingDesc: "Teks secara otomatis menyesuaikan dengan layar",
80:         messageHistory: "Riwayat pesan",
81:         messageHistoryDesc: "Akses pesan sebelumnya dengan mudah",
82:         autoSaving: "Penyimpanan otomatis",
83:         autoSavingDesc: "Semua pesan disimpan secara otomatis",
84:         proTips: "Tips Pro",
85:         addToHomescreen: "Tambahkan ke Layar Utama",
86:         addToHomescreenDesc: "Pasang aplikasi untuk akses cepat kapan saja",
87:         quickLoad: "Muat Cepat",
88:         quickLoadDesc: "Ketuk pesan apa pun di Riwayat untuk memuatnya",
89:         textWrapping: "Pemotongan Teks",
90:         textWrappingDesc: "Pesan secara otomatis terpotong pada spasi",
91:         aboutText:
92:             "Orbiting dibuat oleh {{author1}} dan {{author2}}. Ini terinspirasi oleh kebutuhan untuk berkomunikasi dengan orang-orang dalam ruang yang sama, tetapi dengan kebutuhan komunikasi yang berbeda.",
93:         feedbackText: "Silakan kirimkan",
94:         feedbackLink: "umpan balik",
95:         feedbackTextContinue: " kepada kami. Kami menginginkannya! feedback@orbiting.com",
96:         feedbackEmail: "feedback@orbiting.com",
97:     },
98: };
</file>

<file path="app/i18n/translations/index.ts">
 1: import { bn } from "./bn";
 2: import { de } from "./de";
 3: import { en } from "./en";
 4: import { es } from "./es";
 5: import { fr } from "./fr";
 6: import { hi } from "./hi";
 7: import { id } from "./id";
 8: import { ja } from "./ja";
 9: import { ko } from "./ko";
10: import { pt } from "./pt";
11: import { zh } from "./zh";
12: import { zh_TW } from "./zh_TW";
13: export const resources = {
14:     bn,
15:     de,
16:     en,
17:     es,
18:     fr,
19:     hi,
20:     id,
21:     ja,
22:     ko,
23:     pt,
24:     zh,
25:     zh_TW,
26: };
</file>

<file path="app/i18n/translations/ja.ts">
 1: export const ja = {
 2:     common: {
 3:         welcome: "ようこそ",
 4:         about: "詳細",
 5:         settings: "設定",
 6:         help: "ヘルプ",
 7:         history: "履歴",
 8:         clear: "クリア",
 9:         save: "保存",
10:         cancel: "キャンセル",
11:         delete: "削除",
12:         confirm: "確認",
13:         language: "言語",
14:         appearance: "外観",
15:         colorScheme: "カラースキーム",
16:         chooseColorScheme: "お好みのカラースキームを選択してください",
17:         startingFontSize: "初期フォントサイズ",
18:         theme: "テーマ",
19:         chooseTheme: "お好みのテーマを選択してください",
20:         gestures: "ジェスチャー",
21:         shakeAction: "シェイクアクション",
22:         shakeDescription: "デバイスを振ったときの動作を選択してください",
23:         none: "なし",
24:         clearText: "テキストをクリア",
25:         clearTextDescription: "シェイクしてテキストをクリアする",
26:         flashScreen: "画面を点滅",
27:         flashScreenDescription: "シェイクして画面の色を点滅させる",
28:         resetDefaults: "デフォルトに戻す",
29:         system: "システム",
30:         light: "ライト",
31:         dark: "ダーク",
32:         // Navigation
33:         home: "ホーム",
34:         homeHint: "メインのテキスト入力画面に移動",
35:         historyTab: "履歴",
36:         historyHint: "メッセージ履歴を表示",
37:         helpTab: "ヘルプ",
38:         helpHint: "アプリの使い方とヘルプを表示",
39:         settingsTab: "設定",
40:         settingsHint: "アプリの設定を調整",
41:         aboutTab: "詳細",
42:         aboutHint: "アプリ情報とクレジットを表示",
43:         mainNavigation: "メインナビゲーション",
44:         // Actions
45:         clearHint: "画面上の現在のテキストをすべて消去します",
46:         showHistory: "履歴を表示",
47:         showHistoryHint: "メッセージ履歴画面を開きます",
48:         // History Screen
49:         searchMessages: "メッセージを検索",
50:         messagesWillAppearHere: "作成したメッセージがここに表示されます",
51:         clearAllHistory: "全履歴を削除",
52:         clearHistoryTitle: "履歴を削除",
53:         clearHistoryConfirmMessage:
54:             "これにより、すべてのメッセージが完全に削除されます。よろしいですか？",
55:         clearAll: "すべてクリア",
56:         deleteMessage: "メッセージを削除",
57:         deleteMessageConfirm: "このメッセージを削除してもよろしいですか？",
58:         noMessages: "メッセージなし",
59:         // Text Input
60:         typeHere: "ここに入力",
61:         // Help Screen
62:         welcomeToOrbiting: "Orbitingへようこそ",
63:         appDescription:
64:             "あなたの目のためのシンプルなメッセージングアプリ。周囲の人々にメッセージを入力して表示するために使用できます。メッセージをはっきりと表示します。",
65:         quickStartGuide: "クイックスタートガイド",
66:         tapAndType: "✍️ タップして入力開始",
67:         tapAndTypeDesc: "メッセージがはっきりと表示されます！",
68:         swipeLeft: "⬅️ 左にスワイプ",
69:         swipeLeftDesc: "表示をクリアする",
70:         swipeRight: "➡️ 右にスワイプ",
71:         swipeRightDesc: "メニューと設定を表示する",
72:         swipeUp: "⬆️ 上にスワイプ",
73:         swipeUpDesc: "履歴を表示する",
74:         crossPlatform: "📱 クロスプラットフォーム",
75:         crossPlatformDesc: "デスクトップとモバイルの両方で動作",
76:         features: "機能",
77:         autoScaling: "自動調整テキストサイズ",
78:         autoScalingDesc: "テキストは画面に合わせて自動的に調整されます",
79:         messageHistory: "メッセージ履歴",
80:         messageHistoryDesc: "以前のメッセージに簡単にアクセス",
81:         autoSaving: "自動保存",
82:         autoSavingDesc: "すべてのメッセージは自動的に保存されます",
83:         proTips: "プロのヒント",
84:         addToHomescreen: "ホーム画面に追加",
85:         addToHomescreenDesc:
86:             "いつでも素早くアクセスできるようアプリをインストール",
87:         quickLoad: "クイックロード",
88:         quickLoadDesc: "履歴内のメッセージをタップして読み込む",
89:         textWrapping: "テキストの折り返し",
90:         textWrappingDesc: "メッセージは空白で自動的に折り返されます",
91:         aboutText:
92:             "Orbitingは{{author1}}と{{author2}}によって作成されました。同じ空間にいるが、異なるコミュニケーションニーズを持つ人々とコミュニケーションを取る必要性に触発されました。",
93:         feedbackText: "ぜひ",
94:         feedbackLink: "フィードバック",
95:         feedbackTextContinue: "をお送りください。お待ちしています！ feedback@orbiting.com",
96:         feedbackEmail: "feedback@orbiting.com",
97:     },
98: };
</file>

<file path="app/i18n/translations/ko.ts">
 1: export const ko = {
 2:     common: {
 3:         welcome: "환영합니다",
 4:         about: "소개",
 5:         settings: "설정",
 6:         help: "도움말",
 7:         history: "기록",
 8:         clear: "지우기",
 9:         save: "저장",
10:         cancel: "취소",
11:         delete: "삭제",
12:         confirm: "확인",
13:         language: "언어",
14:         appearance: "외관",
15:         colorScheme: "색상 테마",
16:         chooseColorScheme: "원하는 색상 테마를 선택하세요",
17:         startingFontSize: "기본 글자 크기",
18:         theme: "테마",
19:         chooseTheme: "원하는 테마를 선택하세요",
20:         gestures: "제스처",
21:         shakeAction: "흔들기 동작",
22:         shakeDescription: "기기를 흔들 때 일어날 동작을 선택하세요",
23:         none: "없음",
24:         clearText: "텍스트 지우기",
25:         clearTextDescription: "흔들어서 현재 텍스트 지우기",
26:         flashScreen: "화면 깜빡임",
27:         flashScreenDescription: "흔들어서 화면 색상 깜빡이기",
28:         resetDefaults: "기본값으로 초기화",
29:         system: "시스템",
30:         light: "라이트",
31:         dark: "다크",
32:         // Navigation
33:         home: "홈",
34:         homeHint: "메인 텍스트 입력 화면으로 이동",
35:         historyTab: "기록",
36:         historyHint: "메시지 기록 보기",
37:         helpTab: "도움말",
38:         helpHint: "앱 사용법 및 도움말 보기",
39:         settingsTab: "설정",
40:         settingsHint: "앱 환경설정 조정하기",
41:         aboutTab: "소개",
42:         aboutHint: "앱 정보 및 제작진 보기",
43:         mainNavigation: "메인 내비게이션",
44:         // Actions
45:         clearHint: "화면의 모든 현재 텍스트를 지웁니다",
46:         showHistory: "기록 보기",
47:         showHistoryHint: "메시지 기록 화면을 엽니다",
48:         // History Screen
49:         searchMessages: "메시지 검색",
50:         messagesWillAppearHere: "작성한 메시지가 여기에 표시됩니다",
51:         clearAllHistory: "모든 기록 지우기",
52:         clearHistoryTitle: "기록 지우기",
53:         clearHistoryConfirmMessage:
54:             "이 작업은 모든 메시지를 영구적으로 삭제합니다. 계속하시겠습니까?",
55:         clearAll: "모두 지우기",
56:         deleteMessage: "메시지 삭제",
57:         deleteMessageConfirm: "이 메시지를 삭제하시겠습니까?",
58:         noMessages: "메시지 없음",
59:         // Text Input
60:         typeHere: "여기에 입력하세요",
61:         // Help Screen
62:         welcomeToOrbiting: "Orbiting에 오신 것을 환영합니다",
63:         appDescription:
64:             "당신의 눈을 위한 간단한 메시징 앱입니다. 주변 사람들에게 메시지를 입력하고 표시하는 데 사용할 수 있습니다. 메시지를 선명하고 명확하게 표시합니다.",
65:         quickStartGuide: "빠른 시작 가이드",
66:         tapAndType: "✍️ 탭하고 입력 시작하기",
67:         tapAndTypeDesc: "메시지가 선명하고 명확하게 표시됩니다!",
68:         swipeLeft: "⬅️ 왼쪽으로 스와이프",
69:         swipeLeftDesc: "화면을 지우기 위해",
70:         swipeRight: "➡️ 오른쪽으로 스와이프",
71:         swipeRightDesc: "메뉴와 설정을 보기 위해",
72:         swipeUp: "⬆️ 위로 스와이프",
73:         swipeUpDesc: "기록을 표시하기 위해",
74:         crossPlatform: "📱 크로스 플랫폼",
75:         crossPlatformDesc: "데스크톱과 모바일 모두에서 작동합니다",
76:         features: "기능",
77:         autoScaling: "자동 텍스트 크기 조정",
78:         autoScalingDesc: "텍스트가 화면에 맞게 자동으로 조정됩니다",
79:         messageHistory: "메시지 기록",
80:         messageHistoryDesc: "이전 메시지에 쉽게 접근할 수 있습니다",
81:         autoSaving: "자동 저장",
82:         autoSavingDesc: "모든 메시지는 자동으로 저장됩니다",
83:         proTips: "프로 팁",
84:         addToHomescreen: "홈 화면에 추가",
85:         addToHomescreenDesc: "언제든지 빠른 접근을 위해 앱 설치하기",
86:         quickLoad: "빠른 로드",
87:         quickLoadDesc: "기록에서 메시지를 탭하여 로드하기",
88:         textWrapping: "텍스트 줄바꿈",
89:         textWrappingDesc: "메시지는 공백에서 자동으로 줄바꿈됩니다",
90:         aboutText:
91:             "Orbiting은 {{author1}}와(과) {{author2}}에 의해 만들어졌습니다. 이는 같은 공간에 있지만 다른 의사소통 요구를 가진 사람들과 소통해야 할 필요성에서 영감을 받았습니다.",
92:         feedbackText: "저희에게",
93:         feedbackLink: "피드백",
94:         feedbackTextContinue: "을 보내주세요. 저희는 그것을 원합니다! feedback@orbiting.com",
95:         feedbackEmail: "feedback@orbiting.com",
96:     },
97: };
</file>

<file path="app/i18n/translations/pt.ts">
  1: export const pt = {
  2:     common: {
  3:         welcome: "Bem-vindo",
  4:         about: "Sobre",
  5:         settings: "Configurações",
  6:         help: "Ajuda",
  7:         history: "Histórico",
  8:         clear: "Limpar",
  9:         save: "Salvar",
 10:         cancel: "Cancelar",
 11:         delete: "Excluir",
 12:         confirm: "Confirmar",
 13:         language: "Idioma",
 14:         appearance: "Aparência",
 15:         colorScheme: "Esquema de Cores",
 16:         chooseColorScheme: "Escolha seu esquema de cores preferido",
 17:         startingFontSize: "Tamanho Inicial da Fonte",
 18:         theme: "Tema",
 19:         chooseTheme: "Escolha seu tema preferido",
 20:         gestures: "Gestos",
 21:         shakeAction: "Ação ao Agitar",
 22:         shakeDescription:
 23:             "Escolha o que acontece quando você agita seu dispositivo",
 24:         none: "Nenhum",
 25:         clearText: "Limpar Texto",
 26:         clearTextDescription: "Agite para limpar o texto atual",
 27:         flashScreen: "Piscar Tela",
 28:         flashScreenDescription: "Agite para piscar as cores da tela",
 29:         resetDefaults: "Restaurar Padrões",
 30:         system: "Sistema",
 31:         light: "Claro",
 32:         dark: "Escuro",
 33:         // Navigation
 34:         home: "Início",
 35:         homeHint: "Navegar para a tela principal de entrada de texto",
 36:         historyTab: "Histórico",
 37:         historyHint: "Ver seu histórico de mensagens",
 38:         helpTab: "Ajuda",
 39:         helpHint: "Ver instruções e ajuda do aplicativo",
 40:         settingsTab: "Configurações",
 41:         settingsHint: "Ajustar preferências e configurações do aplicativo",
 42:         aboutTab: "Sobre",
 43:         aboutHint: "Ver informações e créditos do aplicativo",
 44:         mainNavigation: "Navegação principal",
 45:         // Actions
 46:         clearHint: "Apaga todo o texto atual da tela",
 47:         showHistory: "Mostrar histórico",
 48:         showHistoryHint: "Abre a tela de histórico de mensagens",
 49:         // History Screen
 50:         searchMessages: "Pesquisar mensagens",
 51:         messagesWillAppearHere: "As mensagens que você criar aparecerão aqui",
 52:         clearAllHistory: "Limpar Todo o Histórico",
 53:         clearHistoryTitle: "Limpar Histórico",
 54:         clearHistoryConfirmMessage:
 55:             "Isso excluirá permanentemente todas as mensagens. Tem certeza?",
 56:         clearAll: "Limpar Tudo",
 57:         deleteMessage: "Excluir Mensagem",
 58:         deleteMessageConfirm: "Tem certeza que deseja excluir esta mensagem?",
 59:         noMessages: "Sem mensagens",
 60:         // Text Input
 61:         typeHere: "Digite aqui",
 62:         // Help Screen
 63:         welcomeToOrbiting: "Bem-vindo ao Orbiting",
 64:         appDescription:
 65:             "Um aplicativo de mensagens simples para seus olhos. Você pode usá-lo para digitar e exibir mensagens para as pessoas ao seu redor. Exiba uma mensagem de forma clara e nítida.",
 66:         quickStartGuide: "Guia de Início Rápido",
 67:         tapAndType: "✍️ Toque e comece a digitar",
 68:         tapAndTypeDesc: "Sua mensagem será exibida de forma clara e nítida!",
 69:         swipeLeft: "⬅️ Deslize para a Esquerda",
 70:         swipeLeftDesc: "Para limpar a tela",
 71:         swipeRight: "➡️ Deslize para a Direita",
 72:         swipeRightDesc: "Para ver o menu e configurações",
 73:         swipeUp: "⬆️ Deslize para Cima",
 74:         swipeUpDesc: "Para exibir o histórico",
 75:         crossPlatform: "📱 Multiplataforma",
 76:         crossPlatformDesc:
 77:             "Funciona tanto em desktop quanto em dispositivos móveis",
 78:         features: "Recursos",
 79:         autoScaling: "Tamanho de texto com ajuste automático",
 80:         autoScalingDesc: "O texto se ajusta automaticamente para caber na tela",
 81:         messageHistory: "Histórico de mensagens",
 82:         messageHistoryDesc: "Acesse facilmente suas mensagens anteriores",
 83:         autoSaving: "Salvamento automático",
 84:         autoSavingDesc: "Todas as mensagens são salvas automaticamente",
 85:         proTips: "Dicas Profissionais",
 86:         addToHomescreen: "Adicionar à Tela Inicial",
 87:         addToHomescreenDesc:
 88:             "Instale o aplicativo para acesso rápido a qualquer momento",
 89:         quickLoad: "Carregamento Rápido",
 90:         quickLoadDesc:
 91:             "Toque em qualquer mensagem no Histórico para carregá-la",
 92:         textWrapping: "Quebra de Texto",
 93:         textWrappingDesc:
 94:             "As mensagens quebram automaticamente nos espaços em branco",
 95:         aboutText:
 96:             "Orbiting foi criado por {{author1}} e {{author2}}. Foi inspirado pela necessidade de se comunicar com pessoas no mesmo espaço, mas com diferentes necessidades de comunicação.",
 97:         feedbackText: "Por favor, envie-nos",
 98:         feedbackLink: "feedback",
 99:         feedbackTextContinue: ". Nós queremos recebê-lo! feedback@orbiting.com",
100:         feedbackEmail: "feedback@orbiting.com",
101:     },
102: };
</file>

<file path="app/i18n/translations/zh_TW.ts">
 1: export const zh_TW = {
 2:     common: {
 3:         welcome: "歡迎",
 4:         about: "關於",
 5:         settings: "設定",
 6:         help: "幫助",
 7:         history: "歷史記錄",
 8:         clear: "清除",
 9:         save: "儲存",
10:         cancel: "取消",
11:         delete: "刪除",
12:         confirm: "確認",
13:         language: "語言",
14:         appearance: "外觀",
15:         colorScheme: "色彩模式",
16:         chooseColorScheme: "選擇您偏好的色彩模式",
17:         startingFontSize: "起始字型大小",
18:         theme: "主題",
19:         chooseTheme: "選擇您偏好的主題",
20:         gestures: "手勢",
21:         shakeAction: "搖晃動作",
22:         shakeDescription: "選擇當您搖晃裝置時發生的操作",
23:         none: "無",
24:         clearText: "清除文字",
25:         clearTextDescription: "搖晃裝置清除目前文字",
26:         flashScreen: "閃爍螢幕",
27:         flashScreenDescription: "搖晃裝置使螢幕顏色閃爍",
28:         resetDefaults: "恢復預設設定",
29:         system: "系統",
30:         light: "淺色",
31:         dark: "深色",
32:         // Navigation
33:         home: "首頁",
34:         homeHint: "導航至主文字輸入螢幕",
35:         historyTab: "歷史",
36:         historyHint: "查看您的訊息歷史",
37:         helpTab: "幫助",
38:         helpHint: "查看應用說明和幫助",
39:         settingsTab: "設定",
40:         settingsHint: "調整應用偏好和設定",
41:         aboutTab: "關於",
42:         aboutHint: "查看應用資訊和製作人員",
43:         mainNavigation: "主導航",
44:         // Actions
45:         clearHint: "清除螢幕上的所有目前文字",
46:         showHistory: "顯示歷史記錄",
47:         showHistoryHint: "開啟訊息歷史螢幕",
48:         // History Screen
49:         searchMessages: "搜尋訊息",
50:         messagesWillAppearHere: "您建立的訊息將顯示在這裡",
51:         clearAllHistory: "清除所有歷史記錄",
52:         clearHistoryTitle: "清除歷史記錄",
53:         clearHistoryConfirmMessage: "這將永久刪除所有訊息。您確定嗎？",
54:         clearAll: "清除全部",
55:         deleteMessage: "刪除訊息",
56:         deleteMessageConfirm: "您確定要刪除此訊息嗎？",
57:         noMessages: "沒有訊息",
58:         // Text Input
59:         typeHere: "在此輸入",
60:         // Help Screen
61:         welcomeToOrbiting: "歡迎使用Orbiting",
62:         appDescription:
63:             "一個簡單的為您的眼睛設計的訊息應用。您可以用它來輸入並向周圍的人顯示訊息。清晰明瞭地展示訊息。",
64:         quickStartGuide: "快速入門指南",
65:         tapAndType: "✍️ 點擊並開始輸入",
66:         tapAndTypeDesc: "您的訊息將清晰明瞭地顯示！",
67:         swipeLeft: "⬅️ 左滑",
68:         swipeLeftDesc: "清除顯示",
69:         swipeRight: "➡️ 右滑",
70:         swipeRightDesc: "查看選單和設定",
71:         swipeUp: "⬆️ 上滑",
72:         swipeUpDesc: "顯示歷史記錄",
73:         crossPlatform: "📱 跨平台",
74:         crossPlatformDesc: "同時適用於桌面和移動裝置",
75:         features: "功能",
76:         autoScaling: "自動調整文字大小",
77:         autoScalingDesc: "文字自動調整以適應螢幕",
78:         messageHistory: "訊息歷史",
79:         messageHistoryDesc: "輕鬆存取您之前的訊息",
80:         autoSaving: "自動儲存",
81:         autoSavingDesc: "所有訊息都會自動儲存",
82:         proTips: "專業提示",
83:         addToHomescreen: "新增至主螢幕",
84:         addToHomescreenDesc: "安裝應用以隨時快速存取",
85:         quickLoad: "快速載入",
86:         quickLoadDesc: "點擊歷史記錄中的任何訊息以載入它",
87:         textWrapping: "文字換行",
88:         textWrappingDesc: "訊息在空格處自動換行",
89:         aboutText:
90:             "Orbiting由{{author1}}和{{author2}}建立。它的靈感來源於在同一空間內與具有不同溝通需求的人溝通的需要。",
91:         feedbackText: "請向我們發送",
92:         feedbackLink: "回饋",
93:         feedbackTextContinue: "。我們期待您的回饋！ feedback@orbiting.com",
94:         feedbackEmail: "feedback@orbiting.com",
95:     },
96: };
</file>

<file path="app/i18n/translations/zh.ts">
 1: export const zh = {
 2:     common: {
 3:         welcome: "欢迎",
 4:         about: "关于",
 5:         settings: "设置",
 6:         help: "帮助",
 7:         history: "历史记录",
 8:         clear: "清除",
 9:         save: "保存",
10:         cancel: "取消",
11:         delete: "删除",
12:         confirm: "确认",
13:         language: "语言",
14:         appearance: "外观",
15:         colorScheme: "色彩模式",
16:         chooseColorScheme: "选择您偏好的色彩模式",
17:         startingFontSize: "起始字体大小",
18:         theme: "主题",
19:         chooseTheme: "选择您偏好的主题",
20:         gestures: "手势",
21:         shakeAction: "摇动动作",
22:         shakeDescription: "选择当您摇动设备时发生的操作",
23:         none: "无",
24:         clearText: "清除文本",
25:         clearTextDescription: "摇动设备清除当前文本",
26:         flashScreen: "闪烁屏幕",
27:         flashScreenDescription: "摇动设备使屏幕颜色闪烁",
28:         resetDefaults: "恢复默认设置",
29:         system: "系统",
30:         light: "浅色",
31:         dark: "深色",
32:         // Navigation
33:         home: "首页",
34:         homeHint: "导航至主文本输入屏幕",
35:         historyTab: "历史",
36:         historyHint: "查看您的消息历史",
37:         helpTab: "帮助",
38:         helpHint: "查看应用说明和帮助",
39:         settingsTab: "设置",
40:         settingsHint: "调整应用偏好和设置",
41:         aboutTab: "关于",
42:         aboutHint: "查看应用信息和制作人员",
43:         mainNavigation: "主导航",
44:         // Actions
45:         clearHint: "清除屏幕上的所有当前文本",
46:         showHistory: "显示历史记录",
47:         showHistoryHint: "打开消息历史屏幕",
48:         // History Screen
49:         searchMessages: "搜索消息",
50:         messagesWillAppearHere: "您创建的消息将显示在这里",
51:         clearAllHistory: "清除所有历史记录",
52:         clearHistoryTitle: "清除历史记录",
53:         clearHistoryConfirmMessage: "这将永久删除所有消息。您确定吗？",
54:         clearAll: "清除全部",
55:         deleteMessage: "删除消息",
56:         deleteMessageConfirm: "您确定要删除此消息吗？",
57:         noMessages: "没有消息",
58:         // Text Input
59:         typeHere: "在此输入",
60:         // Help Screen
61:         welcomeToOrbiting: "欢迎使用Orbiting",
62:         appDescription:
63:             "一个简单的为您的眼睛设计的消息应用。您可以用它来输入并向周围的人显示消息。清晰明了地展示消息。",
64:         quickStartGuide: "快速入门指南",
65:         tapAndType: "✍️ 点击并开始输入",
66:         tapAndTypeDesc: "您的消息将清晰明了地显示！",
67:         swipeLeft: "⬅️ 左滑",
68:         swipeLeftDesc: "清除显示",
69:         swipeRight: "➡️ 右滑",
70:         swipeRightDesc: "查看菜单和设置",
71:         swipeUp: "⬆️ 上滑",
72:         swipeUpDesc: "显示历史记录",
73:         crossPlatform: "📱 跨平台",
74:         crossPlatformDesc: "同时适用于桌面和移动设备",
75:         features: "功能",
76:         autoScaling: "自动调整文本大小",
77:         autoScalingDesc: "文本自动调整以适应屏幕",
78:         messageHistory: "消息历史",
79:         messageHistoryDesc: "轻松访问您之前的消息",
80:         autoSaving: "自动保存",
81:         autoSavingDesc: "所有消息都会自动保存",
82:         proTips: "专业提示",
83:         addToHomescreen: "添加到主屏幕",
84:         addToHomescreenDesc: "安装应用以随时快速访问",
85:         quickLoad: "快速加载",
86:         quickLoadDesc: "点击历史记录中的任何消息以加载它",
87:         textWrapping: "文本换行",
88:         textWrappingDesc: "消息在空格处自动换行",
89:         aboutText:
90:             "Orbiting由{{author1}}和{{author2}}创建。它的灵感来源于在同一空间内与具有不同沟通需求的人沟通的需要。",
91:         feedbackText: "请向我们发送",
92:         feedbackLink: "反馈",
93:         feedbackTextContinue: "。我们期待您的反馈！ feedback@orbiting.com",
94:         feedbackEmail: "feedback@orbiting.com",
95:     },
96: };
</file>

<file path="app/i18n/config.ts">
 1: import i18next from "i18next";
 2: import { initReactI18next } from "react-i18next";
 3: import * as Localization from "expo-localization";
 4: import { loadLanguage, saveLanguage } from "../utils/languageStorage";
 5: import { resources } from "./translations";
 6: export const defaultNS = "common";
 7: export const SUPPORTED_LANGUAGES = [
 8:     { code: "en", label: "English", flag: "🇺🇸" },
 9:     { code: "de", label: "Deutsch", flag: "🇩🇪" },
10:     { code: "pt", label: "Português", flag: "🇵🇹" },
11:     { code: "es", label: "Español", flag: "🇪🇸" },
12:     { code: "fr", label: "Français", flag: "🇫🇷" },
13:     { code: "hi", label: "हिन्दी", flag: "🇮🇳" },
14:     { code: "bn", label: "বাংলা", flag: "🇧🇩" },
15:     { code: "id", label: "Bahasa Indonesia", flag: "🇮🇩" },
16:     { code: "zh", label: "中文", flag: "🇨🇳" },
17:     { code: "zh_TW", label: "繁體中文", flag: "🇹🇼" },
18:     { code: "ko", label: "한국어", flag: "🇰🇷" },
19:     { code: "ja", label: "日本語", flag: "🇯🇵" },
20: ] as const;
21: export type LanguageCode = (typeof SUPPORTED_LANGUAGES)[number]["code"];
22: // Initialize with system locale, then load saved language
23: i18next.use(initReactI18next).init({
24:     resources,
25:     lng: Localization.locale.split("-")[0], // Use device language initially
26:     fallbackLng: "en",
27:     defaultNS,
28:     interpolation: {
29:         escapeValue: false,
30:     },
31: });
32: // Load saved language preference
33: loadLanguage().then((savedLanguage) => {
34:     if (savedLanguage) {
35:         i18next.changeLanguage(savedLanguage);
36:     }
37: });
38: export const changeLanguage = async (lng: LanguageCode) => {
39:     await saveLanguage(lng);
40:     return i18next.changeLanguage(lng);
41: };
42: export default i18next;
</file>

<file path="app/themes/index.ts">
  1: import { CustomTheme } from '../context/SettingsContext';
  2: import type { ThemeType } from '../context/SettingsContext';
  3: export const THEMES: { label: string; value: ThemeType; colors: { primary: string; secondary: string } }[] = [
  4:   { label: 'Mono', value: 'mono', colors: { primary: '#000000', secondary: '#ffffff' } },
  5:   { label: 'Contrast', value: 'contrast', colors: { primary: '#ffff00', secondary: '#000000' } },
  6:   { label: 'Neon', value: 'neon', colors: { primary: '#00ff00', secondary: '#ff00ff' } },
  7:   { label: 'Candy', value: 'candy', colors: { primary: '#ff1493', secondary: '#9932cc' } },
  8:   { label: 'Classic', value: 'classic', colors: { primary: '#000000', secondary: '#666666' } },
  9:   { label: 'Sunset', value: 'sunset', colors: { primary: '#5b1a1a', secondary: '#8e6c6c' } },
 10:   { label: 'Forest', value: 'forest', colors: { primary: '#1b4d1b', secondary: '#6b8e6b' } },
 11:   { label: 'Ocean', value: 'ocean', colors: { primary: '#1a3c5b', secondary: '#6c8eae' } },
 12:   { label: 'Mint', value: 'mint', colors: { primary: '#3eb489', secondary: '#40826d' } },
 13: ];
 14: export const themes: Record<ThemeType, { light: CustomTheme; dark: CustomTheme }> = {
 15:   classic: {
 16:     light: {
 17:       colors: {
 18:         primary: '#000000',
 19:         onPrimary: '#ffffff',
 20:         primaryContainer: '#f5f5f5',
 21:         onPrimaryContainer: '#000000',
 22:         secondary: '#666666',
 23:         onSecondary: '#ffffff',
 24:         secondaryContainer: '#f0f0f0',
 25:         onSecondaryContainer: '#1a1a1a',
 26:         background: '#ffffff',
 27:         onBackground: '#000000',
 28:         surface: '#ffffff',
 29:         onSurface: '#000000',
 30:         surfaceVariant: '#f5f5f5',
 31:         onSurfaceVariant: '#000000',
 32:         outline: '#666666',
 33:         elevation: {
 34:           level0: 'transparent',
 35:           level1: '#f5f5f5',
 36:           level2: '#ebebeb',
 37:           level3: '#e0e0e0',
 38:           level4: '#d6d6d6',
 39:           level5: '#cccccc',
 40:         }
 41:       },
 42:       custom: {
 43:         tabBar: '#f5f5f5',
 44:         tabBarActive: '#000000',
 45:       }
 46:     },
 47:     dark: {
 48:       colors: {
 49:         primary: '#ffffff',
 50:         onPrimary: '#000000',
 51:         primaryContainer: '#1e1e1e',
 52:         onPrimaryContainer: '#ffffff',
 53:         secondary: '#a0a0a0',
 54:         onSecondary: '#000000',
 55:         secondaryContainer: '#2a2a2a',
 56:         onSecondaryContainer: '#ffffff',
 57:         background: '#121212',
 58:         onBackground: '#ffffff',
 59:         surface: '#121212',
 60:         onSurface: '#ffffff',
 61:         surfaceVariant: '#1e1e1e',
 62:         onSurfaceVariant: '#ffffff',
 63:         outline: '#a0a0a0',
 64:         elevation: {
 65:           level0: 'transparent',
 66:           level1: '#1e1e1e',
 67:           level2: '#232323',
 68:           level3: '#282828',
 69:           level4: '#2d2d2d',
 70:           level5: '#323232',
 71:         }
 72:       },
 73:       custom: {
 74:         tabBar: '#1e1e1e',
 75:         tabBarActive: '#ffffff',
 76:       }
 77:     }
 78:   },
 79:   ocean: {
 80:     light: {
 81:       colors: {
 82:         primary: '#1a3c5b',
 83:         onPrimary: '#ffffff',
 84:         primaryContainer: '#e1f1ff',
 85:         onPrimaryContainer: '#1a3c5b',
 86:         secondary: '#6c8eae',
 87:         onSecondary: '#ffffff',
 88:         secondaryContainer: '#e1f1ff',
 89:         onSecondaryContainer: '#1a3c5b',
 90:         background: '#f0f8ff',
 91:         onBackground: '#1a3c5b',
 92:         surface: '#f0f8ff',
 93:         onSurface: '#1a3c5b',
 94:         surfaceVariant: '#e1f1ff',
 95:         onSurfaceVariant: '#1a3c5b',
 96:         outline: '#6c8eae',
 97:         elevation: {
 98:           level0: 'transparent',
 99:           level1: '#e1f1ff',
100:           level2: '#d2e8ff',
101:           level3: '#c3dfff',
102:           level4: '#b4d6ff',
103:           level5: '#a5cdff',
104:         }
105:       },
106:       custom: {
107:         tabBar: '#e1f1ff',
108:         tabBarActive: '#1a3c5b',
109:       }
110:     },
111:     dark: {
112:       colors: {
113:         primary: '#e0f0ff',
114:         onPrimary: '#0d1b2a',
115:         primaryContainer: '#162635',
116:         onPrimaryContainer: '#e0f0ff',
117:         secondary: '#8ab4e8',
118:         onSecondary: '#0d1b2a',
119:         secondaryContainer: '#162635',
120:         onSecondaryContainer: '#e0f0ff',
121:         background: '#0d1b2a',
122:         onBackground: '#e0f0ff',
123:         surface: '#0d1b2a',
124:         onSurface: '#e0f0ff',
125:         surfaceVariant: '#162635',
126:         onSurfaceVariant: '#e0f0ff',
127:         outline: '#8ab4e8',
128:         elevation: {
129:           level0: 'transparent',
130:           level1: '#162635',
131:           level2: '#1b2f40',
132:           level3: '#20384b',
133:           level4: '#254156',
134:           level5: '#2a4a61',
135:         }
136:       },
137:       custom: {
138:         tabBar: '#162635',
139:         tabBarActive: '#e0f0ff',
140:       }
141:     }
142:   },
143:   forest: {
144:     light: {
145:       colors: {
146:         primary: '#1b4d1b',
147:         onPrimary: '#ffffff',
148:         primaryContainer: '#e6ffe6',
149:         onPrimaryContainer: '#1b4d1b',
150:         secondary: '#6b8e6b',
151:         onSecondary: '#ffffff',
152:         secondaryContainer: '#e6ffe6',
153:         onSecondaryContainer: '#1b4d1b',
154:         background: '#f5fff5',
155:         onBackground: '#1b4d1b',
156:         surface: '#f5fff5',
157:         onSurface: '#1b4d1b',
158:         surfaceVariant: '#e6ffe6',
159:         onSurfaceVariant: '#1b4d1b',
160:         outline: '#6b8e6b',
161:         elevation: {
162:           level0: 'transparent',
163:           level1: '#e6ffe6',
164:           level2: '#d7ffd7',
165:           level3: '#c8ffc8',
166:           level4: '#b9ffb9',
167:           level5: '#aaffaa',
168:         }
169:       },
170:       custom: {
171:         tabBar: '#e6ffe6',
172:         tabBarActive: '#1b4d1b',
173:       }
174:     },
175:     dark: {
176:       colors: {
177:         primary: '#e0ffe0',
178:         onPrimary: '#0d1f0d',
179:         primaryContainer: '#162916',
180:         onPrimaryContainer: '#e0ffe0',
181:         secondary: '#85c285',
182:         onSecondary: '#0d1f0d',
183:         secondaryContainer: '#162916',
184:         onSecondaryContainer: '#e0ffe0',
185:         background: '#0d1f0d',
186:         onBackground: '#e0ffe0',
187:         surface: '#0d1f0d',
188:         onSurface: '#e0ffe0',
189:         surfaceVariant: '#162916',
190:         onSurfaceVariant: '#e0ffe0',
191:         outline: '#85c285',
192:         elevation: {
193:           level0: 'transparent',
194:           level1: '#162916',
195:           level2: '#1b321b',
196:           level3: '#203b20',
197:           level4: '#254425',
198:           level5: '#2a4d2a',
199:         }
200:       },
201:       custom: {
202:         tabBar: '#162916',
203:         tabBarActive: '#e0ffe0',
204:       }
205:     }
206:   },
207:   sunset: {
208:     light: {
209:       colors: {
210:         primary: '#5b1a1a',
211:         onPrimary: '#ffffff',
212:         primaryContainer: '#ffe1e1',
213:         onPrimaryContainer: '#5b1a1a',
214:         secondary: '#8e6c6c',
215:         onSecondary: '#ffffff',
216:         secondaryContainer: '#ffe1e1',
217:         onSecondaryContainer: '#5b1a1a',
218:         background: '#fff5f0',
219:         onBackground: '#5b1a1a',
220:         surface: '#fff5f0',
221:         onSurface: '#5b1a1a',
222:         surfaceVariant: '#ffe1e1',
223:         onSurfaceVariant: '#5b1a1a',
224:         outline: '#8e6c6c',
225:         elevation: {
226:           level0: 'transparent',
227:           level1: '#ffe1e1',
228:           level2: '#ffd2d2',
229:           level3: '#ffc3c3',
230:           level4: '#ffb4b4',
231:           level5: '#ffa5a5',
232:         }
233:       },
234:       custom: {
235:         tabBar: '#ffe1e1',
236:         tabBarActive: '#5b1a1a',
237:       }
238:     },
239:     dark: {
240:       colors: {
241:         primary: '#ffe0e0',
242:         onPrimary: '#1f0d0d',
243:         primaryContainer: '#291616',
244:         onPrimaryContainer: '#ffe0e0',
245:         secondary: '#c28585',
246:         onSecondary: '#1f0d0d',
247:         secondaryContainer: '#291616',
248:         onSecondaryContainer: '#ffe0e0',
249:         background: '#1f0d0d',
250:         onBackground: '#ffe0e0',
251:         surface: '#1f0d0d',
252:         onSurface: '#ffe0e0',
253:         surfaceVariant: '#291616',
254:         onSurfaceVariant: '#ffe0e0',
255:         outline: '#c28585',
256:         elevation: {
257:           level0: 'transparent',
258:           level1: '#291616',
259:           level2: '#321b1b',
260:           level3: '#3b2020',
261:           level4: '#442525',
262:           level5: '#4d2a2a',
263:         }
264:       },
265:       custom: {
266:         tabBar: '#291616',
267:         tabBarActive: '#ffe0e0',
268:       }
269:     }
270:   },
271:   mono: {
272:     light: {
273:       colors: {
274:         primary: '#000000',
275:         onPrimary: '#ffffff',
276:         primaryContainer: '#ffffff',
277:         onPrimaryContainer: '#000000',
278:         secondary: '#000000',
279:         onSecondary: '#ffffff',
280:         secondaryContainer: '#f0f0f0',
281:         onSecondaryContainer: '#000000',
282:         background: '#ffffff',
283:         onBackground: '#000000',
284:         surface: '#ffffff',
285:         onSurface: '#000000',
286:         surfaceVariant: '#f0f0f0',
287:         onSurfaceVariant: '#000000',
288:         outline: '#000000',
289:         elevation: {
290:           level0: 'transparent',
291:           level1: '#ffffff',
292:           level2: '#f0f0f0',
293:           level3: '#e6e6e6',
294:           level4: '#dcdcdc',
295:           level5: '#d2d2d2',
296:         }
297:       },
298:       custom: {
299:         tabBar: '#f0f0f0',
300:         tabBarActive: '#000000',
301:       }
302:     },
303:     dark: {
304:       colors: {
305:         primary: '#ffffff',
306:         onPrimary: '#000000',
307:         primaryContainer: '#000000',
308:         onPrimaryContainer: '#ffffff',
309:         secondary: '#ffffff',
310:         onSecondary: '#000000',
311:         secondaryContainer: '#000000',
312:         onSecondaryContainer: '#ffffff',
313:         background: '#000000',
314:         onBackground: '#ffffff',
315:         surface: '#000000',
316:         onSurface: '#ffffff',
317:         surfaceVariant: '#000000',
318:         onSurfaceVariant: '#ffffff',
319:         outline: '#ffffff',
320:         elevation: {
321:           level0: 'transparent',
322:           level1: '#0a0a0a',
323:           level2: '#141414',
324:           level3: '#1f1f1f',
325:           level4: '#292929',
326:           level5: '#333333',
327:         }
328:       },
329:       custom: {
330:         tabBar: '#000000',
331:         tabBarActive: '#ffffff',
332:       }
333:     }
334:   },
335:   neon: {
336:     light: {
337:       colors: {
338:         primary: '#00e600',
339:         onPrimary: '#000000',
340:         primaryContainer: '#e6ffe6',
341:         onPrimaryContainer: '#003300',
342:         secondary: '#e600e6',
343:         onSecondary: '#000000',
344:         secondaryContainer: '#ffe6ff',
345:         onSecondaryContainer: '#330033',
346:         background: '#ffffff',
347:         onBackground: '#00cc00',
348:         surface: '#ffffff',
349:         onSurface: '#00cc00',
350:         surfaceVariant: '#e6ffe6',
351:         onSurfaceVariant: '#003300',
352:         outline: '#00ff00',
353:         elevation: {
354:           level0: 'transparent',
355:           level1: '#e6ffe6',
356:           level2: '#ccffcc',
357:           level3: '#b3ffb3',
358:           level4: '#99ff99',
359:           level5: '#80ff80',
360:         }
361:       },
362:       custom: {
363:         tabBar: '#e6ffe6',
364:         tabBarActive: '#00ff00',
365:       }
366:     },
367:     dark: {
368:       colors: {
369:         primary: '#00e600',
370:         onPrimary: '#000000',
371:         primaryContainer: '#001a00',
372:         onPrimaryContainer: '#00ff00',
373:         secondary: '#e600e6',
374:         onSecondary: '#000000',
375:         secondaryContainer: '#1a001a',
376:         onSecondaryContainer: '#ff00ff',
377:         background: '#000000',
378:         onBackground: '#00ff00',
379:         surface: '#000000',
380:         onSurface: '#00ff00',
381:         surfaceVariant: '#001a00',
382:         onSurfaceVariant: '#00ff00',
383:         outline: '#00ff00',
384:         elevation: {
385:           level0: 'transparent',
386:           level1: '#001a00',
387:           level2: '#003300',
388:           level3: '#004d00',
389:           level4: '#006600',
390:           level5: '#008000',
391:         }
392:       },
393:       custom: {
394:         tabBar: '#001a00',
395:         tabBarActive: '#00ff00',
396:       }
397:     }
398:   },
399:   contrast: {
400:     light: {
401:       colors: {
402:         primary: '#000000',
403:         onPrimary: '#ffffff',
404:         primaryContainer: '#ffffff',
405:         onPrimaryContainer: '#000000',
406:         secondary: '#1a1a1a',
407:         onSecondary: '#ffffff',
408:         secondaryContainer: '#f0f0f0',
409:         onSecondaryContainer: '#000000',
410:         background: '#ffffff',
411:         onBackground: '#000000',
412:         surface: '#ffffff',
413:         onSurface: '#000000',
414:         surfaceVariant: '#f0f0f0',
415:         onSurfaceVariant: '#000000',
416:         outline: '#000000',
417:         elevation: {
418:           level0: 'transparent',
419:           level1: '#ffffff',
420:           level2: '#f0f0f0',
421:           level3: '#e6e6e6',
422:           level4: '#dcdcdc',
423:           level5: '#d2d2d2',
424:         }
425:       },
426:       custom: {
427:         tabBar: '#f0f0f0',
428:         tabBarActive: '#000000',
429:       }
430:     },
431:     dark: {
432:       colors: {
433:         primary: '#ffd700',
434:         onPrimary: '#000000',
435:         primaryContainer: '#000000',
436:         onPrimaryContainer: '#ffd700',
437:         secondary: '#ffffff',
438:         onSecondary: '#000000',
439:         secondaryContainer: '#1a1a1a',
440:         onSecondaryContainer: '#ffffff',
441:         background: '#000000',
442:         onBackground: '#ffd700',
443:         surface: '#000000',
444:         onSurface: '#ffd700',
445:         surfaceVariant: '#1a1a1a',
446:         onSurfaceVariant: '#ffd700',
447:         outline: '#ffd700',
448:         elevation: {
449:           level0: 'transparent',
450:           level1: '#1a1a00',
451:           level2: '#333300',
452:           level3: '#4d4d00',
453:           level4: '#666600',
454:           level5: '#808000',
455:         }
456:       },
457:       custom: {
458:         tabBar: '#000000',
459:         tabBarActive: '#ffff00',
460:       }
461:     }
462:   },
463:   candy: {
464:     light: {
465:       colors: {
466:         primary: '#ff1493',
467:         onPrimary: '#ffffff',
468:         primaryContainer: '#ffe4f3',
469:         onPrimaryContainer: '#ff1493',
470:         secondary: '#9932cc',
471:         onSecondary: '#ffffff',
472:         secondaryContainer: '#f3e5ff',
473:         onSecondaryContainer: '#9932cc',
474:         background: '#fff0f8',
475:         onBackground: '#ff1493',
476:         surface: '#fff0f8',
477:         onSurface: '#ff1493',
478:         surfaceVariant: '#ffe4f3',
479:         onSurfaceVariant: '#ff1493',
480:         outline: '#ff69b4',
481:         elevation: {
482:           level0: 'transparent',
483:           level1: '#ffe4f3',
484:           level2: '#ffd9ed',
485:           level3: '#ffcee7',
486:           level4: '#ffc3e1',
487:           level5: '#ffb8db',
488:         }
489:       },
490:       custom: {
491:         tabBar: '#ffe4f3',
492:         tabBarActive: '#ff1493',
493:       }
494:     },
495:     dark: {
496:       colors: {
497:         primary: '#ff69b4',
498:         onPrimary: '#1a0011',
499:         primaryContainer: '#4d0033',
500:         onPrimaryContainer: '#ff69b4',
501:         secondary: '#da70d6',
502:         onSecondary: '#1a001a',
503:         secondaryContainer: '#4d004d',
504:         onSecondaryContainer: '#da70d6',
505:         background: '#1a0011',
506:         onBackground: '#ff69b4',
507:         surface: '#1a0011',
508:         onSurface: '#ff69b4',
509:         surfaceVariant: '#4d0033',
510:         onSurfaceVariant: '#ff69b4',
511:         outline: '#ff69b4',
512:         elevation: {
513:           level0: 'transparent',
514:           level1: '#4d0033',
515:           level2: '#660044',
516:           level3: '#800055',
517:           level4: '#990066',
518:           level5: '#b30077',
519:         }
520:       },
521:       custom: {
522:         tabBar: '#4d0033',
523:         tabBarActive: '#ff69b4',
524:       }
525:     }
526:   },
527:   mint: {
528:     light: {
529:       colors: {
530:         primary: '#3eb489',
531:         onPrimary: '#ffffff',
532:         primaryContainer: '#e0f5ed',
533:         onPrimaryContainer: '#3eb489',
534:         secondary: '#40826d',
535:         onSecondary: '#ffffff',
536:         secondaryContainer: '#e0f5ed',
537:         onSecondaryContainer: '#40826d',
538:         background: '#f0faf6',
539:         onBackground: '#3eb489',
540:         surface: '#f0faf6',
541:         onSurface: '#3eb489',
542:         surfaceVariant: '#e0f5ed',
543:         onSurfaceVariant: '#3eb489',
544:         outline: '#40826d',
545:         elevation: {
546:           level0: 'transparent',
547:           level1: '#e0f5ed',
548:           level2: '#d1f0e3',
549:           level3: '#c2ebd9',
550:           level4: '#b3e6cf',
551:           level5: '#a4e1c5',
552:         }
553:       },
554:       custom: {
555:         tabBar: '#e0f5ed',
556:         tabBarActive: '#3eb489',
557:       }
558:     },
559:     dark: {
560:       colors: {
561:         primary: '#98ffd9',
562:         onPrimary: '#00261a',
563:         primaryContainer: '#004d33',
564:         onPrimaryContainer: '#98ffd9',
565:         secondary: '#66ffb2',
566:         onSecondary: '#00261a',
567:         secondaryContainer: '#004d33',
568:         onSecondaryContainer: '#66ffb2',
569:         background: '#00261a',
570:         onBackground: '#98ffd9',
571:         surface: '#00261a',
572:         onSurface: '#98ffd9',
573:         surfaceVariant: '#004d33',
574:         onSurfaceVariant: '#98ffd9',
575:         outline: '#66ffb2',
576:         elevation: {
577:           level0: 'transparent',
578:           level1: '#004d33',
579:           level2: '#006644',
580:           level3: '#008055',
581:           level4: '#009966',
582:           level5: '#00b377',
583:         }
584:       },
585:       custom: {
586:         tabBar: '#004d33',
587:         tabBarActive: '#98ffd9',
588:       }
589:     }
590:   }
591: };
</file>

<file path="app/utils/languageStorage.ts">
 1: import AsyncStorage from '@react-native-async-storage/async-storage';
 2: import type { LanguageCode } from '../i18n/config';
 3: const LANGUAGE_KEY = '@orbiting/language';
 4: export async function saveLanguage(language: LanguageCode): Promise<void> {
 5:   try {
 6:     await AsyncStorage.setItem(LANGUAGE_KEY, language);
 7:   } catch (error) {
 8:     console.error('Error saving language:', error);
 9:   }
10: }
11: export async function loadLanguage(): Promise<LanguageCode | null> {
12:   try {
13:     const language = await AsyncStorage.getItem(LANGUAGE_KEY);
14:     return language as LanguageCode;
15:   } catch (error) {
16:     console.error('Error loading language:', error);
17:     return null;
18:   }
19: }
</file>

<file path="app/utils/registerServiceWorker.ts">
 1: export async function registerServiceWorker() {
 2:   if (typeof window !== 'undefined' && 'serviceWorker' in navigator && process.env.NODE_ENV === 'production') {
 3:     try {
 4:       const registration = await navigator.serviceWorker.register('/sw.js');
 5:       console.log('SW registered:', registration);
 6:     } catch (error) {
 7:       console.log('SW registration failed:', error);
 8:     }
 9:   }
10: }
</file>

<file path="app/utils/settingsStorage.ts">
 1: import AsyncStorage from '@react-native-async-storage/async-storage';
 2: const SETTINGS_STORAGE_KEY = '@settings';
 3: export async function loadSettings(): Promise<Record<string, unknown> | null> {
 4:   try {
 5:     const settingsJson = await AsyncStorage.getItem(SETTINGS_STORAGE_KEY);
 6:     return settingsJson ? JSON.parse(settingsJson) : null;
 7:   } catch (error) {
 8:     throw new Error(`Failed to load settings: ${error}`);
 9:   }
10: }
11: export async function saveSettings(settings: Record<string, unknown>): Promise<void> {
12:   try {
13:     await AsyncStorage.setItem(SETTINGS_STORAGE_KEY, JSON.stringify(settings));
14:   } catch (error) {
15:     throw new Error(`Failed to save settings: ${error}`);
16:   }
17: }
</file>

<file path="app/utils/storage.ts">
1: import { StoredMessage, storeMessage, getMessages, clearHistory } from './storageUtils';
2: export { StoredMessage, storeMessage, getMessages, clearHistory };
3: // Dummy component to satisfy React router requirements
4: export default function Storage() {
5:   return null;
6: }
</file>

<file path="app/utils/storageUtils.ts">
  1: import AsyncStorage from '@react-native-async-storage/async-storage';
  2: const MESSAGES_KEY = '@messages';
  3: export interface StoredMessage {
  4:   id: string;
  5:   text: string;
  6:   timestamp: number;
  7:   isFavorite?: boolean;
  8: }
  9: export async function storeMessage(text: string): Promise<void> {
 10:   // Don't store empty or whitespace-only messages
 11:   if (!text || !text.trim()) {
 12:     return;
 13:   }
 14:   try {
 15:     const { messages } = await getMessages(0, Number.MAX_SAFE_INTEGER);
 16:     const newMessage: StoredMessage = {
 17:       id: Date.now().toString(),
 18:       text,
 19:       timestamp: Date.now(),
 20:     };
 21:     messages.unshift(newMessage); // Add to beginning since we sort by newest first
 22:     await AsyncStorage.setItem(MESSAGES_KEY, JSON.stringify(messages));
 23:   } catch (error) {
 24:     console.error('Error storing message:', error);
 25:     throw error;
 26:   }
 27: }
 28: interface GetMessagesOptions {
 29:   cursor?: string;
 30:   limit?: number;
 31:   search?: string;
 32: }
 33: export async function getMessages({ 
 34:   cursor, 
 35:   limit = 20,
 36:   search = ''
 37: }: GetMessagesOptions = {}): Promise<{
 38:   messages: StoredMessage[];
 39:   nextCursor: string | null;
 40: }> {
 41:   try {
 42:     const jsonValue = await AsyncStorage.getItem(MESSAGES_KEY);
 43:     let messages = jsonValue ? JSON.parse(jsonValue) : [];
 44:     // Filter by search term if provided
 45:     if (search) {
 46:       const searchLower = search.toLowerCase();
 47:       messages = messages.filter(msg => 
 48:         msg.text.toLowerCase().includes(searchLower)
 49:       );
 50:     }
 51:     // Sort by timestamp descending
 52:     messages.sort((a: StoredMessage, b: StoredMessage) => b.timestamp - a.timestamp);
 53:     // Apply cursor-based pagination
 54:     let startIndex = 0;
 55:     if (cursor) {
 56:       startIndex = messages.findIndex(msg => msg.id === cursor) + 1;
 57:       if (startIndex === 0) {
 58:         startIndex = messages.length; // Cursor not found, return empty
 59:       }
 60:     }
 61:     const paginatedMessages = messages.slice(startIndex, startIndex + limit);
 62:     const nextCursor = paginatedMessages.length === limit ? 
 63:       paginatedMessages[paginatedMessages.length - 1].id : 
 64:       null;
 65:     return { 
 66:       messages: paginatedMessages,
 67:       nextCursor
 68:     };
 69:   } catch (error) {
 70:     console.error('Error getting messages:', error);
 71:     throw error;
 72:   }
 73: }
 74: export async function clearHistory(): Promise<void> {
 75:   try {
 76:     await AsyncStorage.setItem(MESSAGES_KEY, JSON.stringify([]));
 77:   } catch (error) {
 78:     console.error('Error clearing history:', error);
 79:     throw error;
 80:   }
 81: }
 82: export async function toggleFavorite(id: string): Promise<void> {
 83:   try {
 84:     const { messages } = await getMessages(0, Number.MAX_SAFE_INTEGER);
 85:     const updatedMessages = messages.map(msg => 
 86:       msg.id === id ? { ...msg, isFavorite: !msg.isFavorite } : msg
 87:     );
 88:     await AsyncStorage.setItem(MESSAGES_KEY, JSON.stringify(updatedMessages));
 89:   } catch (error) {
 90:     console.error('Error toggling favorite:', error);
 91:     throw error;
 92:   }
 93: }
 94: export async function deleteMessage(id: string): Promise<void> {
 95:   try {
 96:     const messages = await getMessages(0, Number.MAX_SAFE_INTEGER);
 97:     const filteredMessages = messages.messages.filter(msg => msg.id !== id);
 98:     await AsyncStorage.setItem(MESSAGES_KEY, JSON.stringify(filteredMessages));
 99:   } catch (error) {
100:     console.error('Error deleting message:', error);
101:     throw error;
102:   }
103: }
</file>

<file path="app/_layout.tsx">
 1: import { Stack, usePathname } from "expo-router";
 2: import { useEffect, useState } from 'react';
 3: import { useTranslation } from 'react-i18next';
 4: import './i18n/config';
 5: import { WelcomeModal } from './components/WelcomeModal';
 6: import { GestureHandlerRootView } from 'react-native-gesture-handler';
 7: import { View } from 'react-native';
 8: import { PaperProvider } from 'react-native-paper';
 9: import { TextProvider } from '../app/context/TextContext';
10: import { SettingsProvider, useSettings } from '../app/context/SettingsContext';
11: import { ErrorBoundary } from './components/ErrorBoundary';
12: function AppContent() {
13:   const { currentTheme } = useSettings();
14:   const { t } = useTranslation();
15:   const pathname = usePathname();
16:   useEffect(() => {
17:     let title = 'Orbiting';
18:     let ogTitle = 'Orbiting';
19:     let ogDescription = 'A simple messaging app for your eyeballs. You can use it to type and display messages to those around you. Display a message loud and clear.';
20:     let ogImage = 'https://orbiting.com/imgs/og.png';
21:     switch (pathname) {
22:       case '/history':
23:         title = `${t('history')} | Orbiting`;
24:         ogTitle = `${t('history')} | Orbiting`;
25:         break;
26:       case '/settings':
27:         title = `${t('settings')} | Orbiting`;
28:         ogTitle = `${t('settings')} | Orbiting`;
29:         break;
30:       case '/help':
31:         title = `${t('help')} | Orbiting`;
32:         ogTitle = `${t('help')} | Orbiting`;
33:         break;
34:       case '/about':
35:         title = `${t('about')} | Orbiting`;
36:         ogTitle = `${t('about')} | Orbiting`;
37:         break;
38:     }
39:     if (typeof document !== 'undefined') {
40:       document.title = title;
41:       const metaTags = [
42:         { property: 'og:title', content: ogTitle },
43:         { property: 'og:description', content: ogDescription },
44:         { property: 'og:image', content: ogImage },
45:         { property: 'og:url', content: window.location.href },
46:         { property: 'og:type', content: 'website' }
47:       ];
48:       metaTags.forEach(({ property, content }) => {
49:         let metaTag = document.querySelector(`meta[property="${property}"]`);
50:         if (!metaTag) {
51:           metaTag = document.createElement('meta');
52:           metaTag.setAttribute('property', property);
53:           document.head.appendChild(metaTag);
54:         }
55:         metaTag.setAttribute('content', content);
56:       });
57:     }
58:   }, [pathname, t]);
59:   return (
60:     <PaperProvider theme={currentTheme}>
61:       <TextProvider>
62:         <>
63:           <WelcomeModal />
64:           <Stack 
65:             screenOptions={{ 
66:               headerShown: false,
67:               contentStyle: { flex: 1 }
68:             }} 
69:           />
70:         </>
71:       </TextProvider>
72:     </PaperProvider>
73:   );
74: }
75: export default function RootLayout() {
76:   const [isClient, setIsClient] = useState(false);
77:   useEffect(() => {
78:     setIsClient(true);
79:   }, []);
80:   if (!isClient) {
81:     return <View />;
82:   }
83:   return (
84:     <ErrorBoundary>
85:       <GestureHandlerRootView style={{ flex: 1 }}>
86:         <SettingsProvider>
87:           <AppContent />
88:         </SettingsProvider>
89:       </GestureHandlerRootView>
90:     </ErrorBoundary>
91:   );
92: }
</file>

<file path="app/+html.tsx">
 1: import { ScrollViewStyleReset } from "expo-router/html";
 2: import type { PropsWithChildren } from "react";
 3: // This file is web-only and used to configure the root HTML for every
 4: // web page during static rendering.
 5: // The contents of this function only run in Node.js environments and
 6: // do not have access to the DOM or browser APIs.
 7: export default function Root({ children }: PropsWithChildren) {
 8:     return (
 9:         <html lang="en">
10:             <head>
11:                 <title>Orbiting</title>
12:                 <meta charSet="utf-8" />
13:                 <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
14:                 <meta
15:                     name="viewport"
16:                     content="width=device-width, initial-scale=1, shrink-to-fit=no"
17:                 />
18:                 <script
19:                     src="https://tinylytics.app/embed/ezMr4h65sCPevsfzK4ed.js"
20:                     defer
21:                 ></script>
22:                 {/* Link the PWA manifest file. */}
23:                 <link rel="manifest" href="/manifest.json" />
24:                 {/* Bootstrap the service worker. */}
25:                 <script dangerouslySetInnerHTML={{ __html: sw }} />
26:                 {/*
27:           Disable body scrolling on web. This makes ScrollView components work closer to how they do on native.
28:           However, body scrolling is often nice to have for mobile web. If you want to enable it, remove this line.
29:         */}
30:                 <ScrollViewStyleReset />
31:                 {/* Add any additional <head> elements that you want globally available on web... */}
32:                 <meta property="og:image" content="https://orbiting.com/imgs/og.png" />
33:                 <meta property="og:url" content={typeof window !== 'undefined' ? window.location.href : ''} />
34:                 <meta property="og:type" content="website" />
35:                 <meta property="og:description" content="A simple messaging app for your eyeballs. You can use it to type and display messages to those around you. Display a message loud and clear." />
36:             </head>
37:             <body>{children}</body>
38:         </html>
39:     );
40: }
41: const sw = `
42: if ('serviceWorker' in navigator) {
43:     window.addEventListener('load', () => {
44:         navigator.serviceWorker.register('/sw.js').then(registration => {
45:             console.log('Service Worker registered with scope:', registration.scope);
46:         }).catch(error => {
47:             console.error('Service Worker registration failed:', error);
48:         });
49:     });
50: }
51: `;
</file>

<file path="app/about.tsx">
 1: import { StyleSheet, Linking } from "react-native";
 2: import {
 3:     Surface,
 4:     Text,
 5:     useTheme,
 6: } from "react-native-paper";
 7: import { useTranslation } from 'react-i18next';
 8: import PageLayout from "./components/PageLayout";
 9: export default function AboutScreen() {
10:     const theme = useTheme();
11:     const { t } = useTranslation();
12:     const handleNamePress = (name: string) => {
13:         Linking.openURL(`https://en.wikipedia.org/wiki/${name}`).catch((err) =>
14:             console.error("Failed to open Wikipedia:", err),
15:         );
16:     };
17:     const handleFeedbackPress = () => {
18:         Linking.openURL("https://docs.google.com/forms/d/e/1FAIpQLSfkRKAA3BGZldZTnJmv2qAEuvVSwnRF4YSw_50jrBd69b1rzg/viewform");
19:     };
20:     const handleEmailPress = () => {
21:         Linking.openURL("mailto:feedback@orbiting.com");
22:     };
23:     const styles = StyleSheet.create({
24:         centered: {
25:             flex: 1,
26:             justifyContent: "center",
27:             alignItems: "center",
28:             padding: 20,
29:         },
30:         title: {
31:             marginBottom: 24,
32:         },
33:         paragraph: {
34:             textAlign: "center",
35:             marginBottom: 16,
36:             lineHeight: 24,
37:         },
38:         link: {
39:             textDecorationLine: "underline",
40:             color: theme.colors.primary,
41:         },
42:     });
43:     return (
44:         <PageLayout>
45:             <Surface style={styles.centered} elevation={1}>
46:                 <Text variant="displaySmall" style={styles.title}>
47:                     {t('about')}
48:                 </Text>
49:                 <Text variant="bodyLarge" style={styles.paragraph}>
50:                     {t('aboutText', {
51:                         author1: (
52:                             <Text
53:                                 variant="bodyLarge"
54:                                 style={styles.link}
55:                                 onPress={() => handleNamePress("Christine_Sun_Kim")}
56:                             >
57:                                 Christine Sun Kim
58:                             </Text>
59:                         ),
60:                         author2: (
61:                             <Text
62:                                 variant="bodyLarge"
63:                                 style={styles.link}
64:                                 onPress={() => handleNamePress("Harper_Reed")}
65:                             >
66:                                 Harper Reed
67:                             </Text>
68:                         )
69:                     })}
70:                 </Text>
71:                 <Text variant="bodyLarge" style={styles.paragraph}>
72:                     {t('feedbackText')}{" "}
73:                     <Text
74:                         variant="bodyLarge"
75:                         style={styles.link}
76:                         onPress={handleFeedbackPress}
77:                     >
78:                         {t('feedbackLink')}
79:                     </Text>
80:                     {t('feedbackTextContinue')}
81:                 </Text>
82:             </Surface>
83:         </PageLayout>
84:     );
85: }
</file>

<file path="app/help.tsx">
  1: import { StyleSheet, View, Linking } from "react-native";
  2: import {
  3:     Surface,
  4:     Text,
  5:     List,
  6:     Card,
  7:     useTheme,
  8:     Divider,
  9: } from "react-native-paper";
 10: import { useTranslation } from 'react-i18next';
 11: import PageLayout from "./components/PageLayout";
 12: export default function HelpScreen() {
 13:     const { t } = useTranslation();
 14:     const theme = useTheme();
 15:     const handleNamePress = (name) => {
 16:         Linking.openURL(`https://en.wikipedia.org/wiki/${name}`);
 17:     };
 18:     const handleFeedbackPress = () => {
 19:         Linking.openURL("https://docs.google.com/forms/d/e/1FAIpQLSfkRKAA3BGZldZTnJmv2qAEuvVSwnRF4YSw_50jrBd69b1rzg/viewform");
 20:     };
 21:     const handleEmailPress = () => {
 22:         Linking.openURL("mailto:feedback@orbiting.com");
 23:     };
 24:     const styles = StyleSheet.create({
 25:         container: {
 26:             gap: 16,
 27:             padding: 16,
 28:         },
 29:         card: {
 30:             marginBottom: 8,
 31:         },
 32:         cardContent: {
 33:             padding: 8,
 34:         },
 35:         sectionTitle: {
 36:             fontSize: 24,
 37:             fontWeight: "bold",
 38:             color: theme.colors.primary,
 39:             paddingHorizontal: 16,
 40:             paddingVertical: 12,
 41:         },
 42:         subsectionTitle: {
 43:             fontSize: 20,
 44:             fontWeight: "bold",
 45:             color: theme.colors.primary,
 46:             paddingHorizontal: 16,
 47:             paddingVertical: 8,
 48:         },
 49:         listSection: {
 50:             backgroundColor: theme.colors.background,
 51:             borderRadius: theme.roundness,
 52:             marginBottom: 8,
 53:             elevation: 1,
 54:         },
 55:         listItem: {
 56:             paddingVertical: 4,
 57:         },
 58:         description: {
 59:             marginTop: 4,
 60:             color: theme.colors.onSurfaceVariant,
 61:         },
 62:         divider: {
 63:             marginVertical: 4,
 64:         },
 65:         link: {
 66:             color: theme.colors.primary,
 67:             textDecorationLine: "underline",
 68:         },
 69:         paragraph: {
 70:             fontSize: 16,
 71:             lineHeight: 24,
 72:             marginBottom: 12,
 73:             paddingHorizontal: 16,
 74:         },
 75:     });
 76:     return (
 77:         <PageLayout scrollable>
 78:             <View style={styles.container}>
 79:                 {/* Welcome Section */}
 80:                 <Card style={styles.card}>
 81:                     <Card.Content>
 82:                         <Text
 83:                             variant="headlineLarge"
 84:                             style={{ marginBottom: 16 }}
 85:                         >
 86:                             {t('welcomeToOrbiting')}
 87:                         </Text>
 88:                         <Text variant="bodyLarge">
 89:                             {t('appDescription')}
 90:                         </Text>
 91:                     </Card.Content>
 92:                 </Card>
 93:                 {/* Quick Start Guide */}
 94:                 <Surface style={styles.listSection}>
 95:                     <Text style={styles.sectionTitle}>{t('quickStartGuide')}</Text>
 96:                     <List.Item
 97:                         style={styles.listItem}
 98:                         title={t('tapAndType')}
 99:                         description={t('tapAndTypeDesc')}
100:                         left={(props) => (
101:                             <List.Icon {...props} icon="gesture-tap" />
102:                         )}
103:                     />
104:                     <Divider style={styles.divider} />
105:                     <List.Item
106:                         style={styles.listItem}
107:                         title={t('swipeLeft')}
108:                         description={t('swipeLeftDesc')}
109:                         left={(props) => (
110:                             <List.Icon {...props} icon="gesture-swipe-left" />
111:                         )}
112:                     />
113:                     <Divider style={styles.divider} />
114:                     <List.Item
115:                         style={styles.listItem}
116:                         title={t('swipeRight')}
117:                         description={t('swipeRightDesc')}
118:                         left={(props) => (
119:                             <List.Icon {...props} icon="gesture-swipe-right" />
120:                         )}
121:                     />
122:                     <Divider style={styles.divider} />
123:                     <List.Item
124:                         style={styles.listItem}
125:                         title={t('swipeUp')}
126:                         description={t('swipeUpDesc')}
127:                         left={(props) => (
128:                             <List.Icon {...props} icon="gesture-swipe-up" />
129:                         )}
130:                     />
131:                     <Divider style={styles.divider} />
132:                     <List.Item
133:                         style={styles.listItem}
134:                         title={t('crossPlatform')}
135:                         description={t('crossPlatformDesc')}
136:                         left={(props) => (
137:                             <List.Icon {...props} icon="devices" />
138:                         )}
139:                     />
140:                 </Surface>
141:                 {/* Features */}
142:                 <Surface style={styles.listSection}>
143:                     <Text style={styles.subsectionTitle}>{t('features')}</Text>
144:                     <List.Item
145:                         style={styles.listItem}
146:                         title={t('autoScaling')}
147:                         description={t('autoScalingDesc')}
148:                         left={(props) => (
149:                             <List.Icon {...props} icon="format-size" />
150:                         )}
151:                     />
152:                     <Divider style={styles.divider} />
153:                     <List.Item
154:                         style={styles.listItem}
155:                         title={t('messageHistory')}
156:                         description={t('messageHistoryDesc')}
157:                         left={(props) => (
158:                             <List.Icon {...props} icon="history" />
159:                         )}
160:                     />
161:                     <Divider style={styles.divider} />
162:                     <List.Item
163:                         style={styles.listItem}
164:                         title={t('autoSaving')}
165:                         description={t('autoSavingDesc')}
166:                         left={(props) => (
167:                             <List.Icon {...props} icon="content-save" />
168:                         )}
169:                     />
170:                 </Surface>
171:                 {/* Pro Tips */}
172:                 <Surface style={styles.listSection}>
173:                     <Text style={styles.subsectionTitle}>{t('proTips')}</Text>
174:                     <List.Item
175:                         style={styles.listItem}
176:                         title={t('addToHomescreen')}
177:                         description={t('addToHomescreenDesc')}
178:                         left={(props) => <List.Icon {...props} icon="home" />}
179:                     />
180:                     <Divider style={styles.divider} />
181:                     <List.Item
182:                         style={styles.listItem}
183:                         title={t('quickLoad')}
184:                         description={t('quickLoadDesc')}
185:                         left={(props) => (
186:                             <List.Icon {...props} icon="gesture-tap" />
187:                         )}
188:                     />
189:                     <Divider style={styles.divider} />
190:                     <List.Item
191:                         style={styles.listItem}
192:                         title={t('textWrapping')}
193:                         description={t('textWrappingDesc')}
194:                         left={(props) => <List.Icon {...props} icon="wrap" />}
195:                     />
196:                 </Surface>
197:                 {/* About Section */}
198:                 <Surface style={styles.listSection}>
199:                     <Text style={styles.sectionTitle}>{t('about')}</Text>
200:                     <Text style={styles.paragraph}>
201:                         {t('aboutText', {
202:                             author1: (
203:                                 <Text
204:                                     style={styles.link}
205:                                     onPress={() => handleNamePress("Christine_Sun_Kim")}
206:                                 >
207:                                     Christine Sun Kim
208:                                 </Text>
209:                             ),
210:                             author2: (
211:                                 <Text
212:                                     style={styles.link}
213:                                     onPress={() => handleNamePress("Harper_Reed")}
214:                                 >
215:                                     Harper Reed
216:                                 </Text>
217:                             )
218:                         })}
219:                     </Text>
220:                     <Text style={styles.paragraph}>
221:                         {t('feedbackText')}{" "}
222:                         <Text style={styles.link} onPress={handleFeedbackPress}>
223:                             {t('feedbackLink')}
224:                         </Text>
225:                         {t('feedbackTextContinue')}
226:                     </Text>
227:                 </Surface>
228:             </View>
229:         </PageLayout>
230:     );
231: }
</file>

<file path="app/history.tsx">
  1: import { StyleSheet, View, useWindowDimensions } from "react-native";
  2: import {
  3:     Text,
  4:     Button,
  5:     ActivityIndicator,
  6:     Surface,
  7:     useTheme,
  8:     Dialog,
  9:     Divider,
 10:     Searchbar,
 11:     Snackbar,
 12:     List,
 13:     TouchableRipple,
 14:     IconButton,
 15:     SegmentedButtons,
 16: } from "react-native-paper";
 17: import { useTranslation } from 'react-i18next';
 18: import PageLayout from "./components/PageLayout";
 19: import { useCallback, useEffect, useState, useMemo } from "react";
 20: import { useText } from "./context/TextContext";
 21: import { useRouter } from "expo-router";
 22: import {
 23:     StoredMessage,
 24:     getMessages,
 25:     clearHistory,
 26:     deleteMessage,
 27:     toggleFavorite,
 28: } from "./utils/storageUtils";
 29: import { FlashList } from "@shopify/flash-list";
 30: export default function HistoryScreen() {
 31:     const theme = useTheme();
 32:     const { t } = useTranslation();
 33:     const [messages, setMessages] = useState<StoredMessage[]>([]);
 34:     const [filteredMessages, setFilteredMessages] = useState<StoredMessage[]>([]);
 35:     const [activeTab, setActiveTab] = useState('all');
 36:     const [isLoading, setIsLoading] = useState(false);
 37:     const [isLoadingMore, setIsLoadingMore] = useState(false);
 38:     const [hasMore, setHasMore] = useState(true);
 39:     const [cursor, setCursor] = useState<string | null>(null);
 40:     const [showClearDialog, setShowClearDialog] = useState(false);
 41:     const [showDeleteDialog, setShowDeleteDialog] = useState(false);
 42:     const [messageToDelete, setMessageToDelete] = useState<string | null>(null);
 43:     const [searchQuery, setSearchQuery] = useState("");
 44:     const [snackbarVisible, setSnackbarVisible] = useState(false);
 45:     const [snackbarMessage, setSnackbarMessage] = useState("");
 46:     const router = useRouter();
 47:     const { clearText } = useText();
 48:     const showSnackbar = (message: string) => {
 49:         setSnackbarMessage(message);
 50:         setSnackbarVisible(true);
 51:     };
 52:     const loadMessages = useCallback(
 53:         async (newCursor: string | null = null, append = false) => {
 54:             try {
 55:                 if (!newCursor) {
 56:                     setIsLoading(true);
 57:                 } else {
 58:                     setIsLoadingMore(true);
 59:                 }
 60:                 const { messages: newMessages, nextCursor } = await getMessages(
 61:                     {
 62:                         cursor: newCursor ?? undefined,
 63:                         limit: 20,
 64:                         search: searchQuery,
 65:                     },
 66:                 );
 67:                 setMessages((prev) =>
 68:                     append ? [...prev, ...newMessages] : newMessages,
 69:                 );
 70:                 setFilteredMessages((prev) =>
 71:                     append ? [...prev, ...newMessages] : newMessages,
 72:                 );
 73:                 setHasMore(!!nextCursor);
 74:                 setCursor(nextCursor);
 75:             } catch (error) {
 76:                 console.error("Failed to load messages:", error);
 77:                 showSnackbar("Failed to load messages");
 78:             } finally {
 79:                 setIsLoading(false);
 80:                 setIsLoadingMore(false);
 81:             }
 82:         },
 83:         [searchQuery],
 84:     );
 85:     useEffect(() => {
 86:         loadMessages(null);
 87:     }, [loadMessages, searchQuery]);
 88:     useEffect(() => {
 89:         // Reset pagination and reload with search
 90:         setCursor(null);
 91:         setMessages([]);
 92:         setFilteredMessages([]);
 93:         loadMessages(null, false);
 94:     }, [searchQuery, loadMessages, activeTab]);
 95:     const displayedMessages = useMemo(() => {
 96:         return activeTab === 'favorites' 
 97:             ? filteredMessages.filter(msg => msg.isFavorite)
 98:             : filteredMessages;
 99:     }, [filteredMessages, activeTab]);
100:     const handleClearHistory = useCallback(async () => {
101:         try {
102:             await clearHistory();
103:             await clearText();
104:             setMessages([]);
105:             setFilteredMessages([]);
106:             setHasMore(false);
107:             showSnackbar("History cleared successfully");
108:         } catch (error) {
109:             console.error("Failed to clear history:", error);
110:             showSnackbar("Failed to clear history");
111:         } finally {
112:             setShowClearDialog(false);
113:         }
114:     }, [clearText]);
115:     const handleDeleteMessage = useCallback(async () => {
116:         if (messageToDelete) {
117:             try {
118:                 await deleteMessage(messageToDelete);
119:                 await loadMessages(null);
120:                 showSnackbar("Message deleted successfully");
121:             } catch (error) {
122:                 console.error("Failed to delete message:", error);
123:                 showSnackbar("Failed to delete message");
124:             } finally {
125:                 setShowDeleteDialog(false);
126:                 setMessageToDelete(null);
127:             }
128:         }
129:     }, [messageToDelete, loadMessages]);
130:     const formatDate = (timestamp: number) => {
131:         const date = new Date(timestamp);
132:         const today = new Date();
133:         const yesterday = new Date(today);
134:         yesterday.setDate(yesterday.getDate() - 1);
135:         if (date.toDateString() === today.toDateString()) {
136:             return date.toLocaleTimeString(undefined, {
137:                 hour: "2-digit",
138:                 minute: "2-digit",
139:             });
140:         } else if (date.toDateString() === yesterday.toDateString()) {
141:             return (
142:                 "Yesterday " +
143:                 date.toLocaleTimeString(undefined, {
144:                     hour: "2-digit",
145:                     minute: "2-digit",
146:                 })
147:             );
148:         } else {
149:             return date.toLocaleDateString(undefined, {
150:                 month: "short",
151:                 day: "numeric",
152:                 hour: "2-digit",
153:                 minute: "2-digit",
154:             });
155:         }
156:     };
157:     const renderItem = useCallback(
158:         ({ item }: { item: StoredMessage }) => (
159:             <TouchableRipple
160:                 onPress={() =>
161:                     router.push({ pathname: "/", params: { text: item.text } })
162:                 }
163:                 onLongPress={() => {
164:                     setMessageToDelete(item.id);
165:                     setShowDeleteDialog(true);
166:                 }}
167:             >
168:                 <List.Item
169:                     title={item.text}
170:                     titleNumberOfLines={1}
171:                     titleStyle={styles.messageText}
172:                     description={formatDate(item.timestamp)}
173:                     descriptionStyle={styles.timestamp}
174:                     right={(props) => (
175:                         <View style={styles.rightIcons}>
176:                             <IconButton
177:                                 icon={item.isFavorite ? "star" : "star-outline"}
178:                                 iconColor={item.isFavorite ? "#000000" : "#757575"}
179:                                 size={20}
180:                                 onPress={async () => {
181:                                     await toggleFavorite(item.id);
182:                                     // Update local state immediately
183:                                     setMessages(prevMessages => 
184:                                         prevMessages.map(msg => 
185:                                             msg.id === item.id 
186:                                                 ? { ...msg, isFavorite: !msg.isFavorite }
187:                                                 : msg
188:                                         )
189:                                     );
190:                                     setFilteredMessages(prevMessages => 
191:                                         prevMessages.map(msg => 
192:                                             msg.id === item.id 
193:                                                 ? { ...msg, isFavorite: !msg.isFavorite }
194:                                                 : msg
195:                                         )
196:                                     );
197:                                 }}
198:                                 accessibilityLabel={item.isFavorite ? t('removeFromFavorites') : t('addToFavorites')}
199:                             />
200:                             <List.Icon
201:                                 {...props}
202:                                 icon="chevron-right"
203:                                 color={theme.colors.onSurfaceVariant}
204:                             />
205:                         </View>
206:                     )}
207:                 />
208:             </TouchableRipple>
209:         ),
210:         [router, theme.colors.onSurfaceVariant],
211:     );
212:     if (isLoading) {
213:         return (
214:             <PageLayout>
215:                 <Surface style={styles.loadingContainer}>
216:                     <ActivityIndicator size="large" />
217:                 </Surface>
218:             </PageLayout>
219:         );
220:     }
221:     return (
222:         <PageLayout>
223:             <Text variant="headlineMedium" style={styles.title}>
224:                 {t('history')}
225:             </Text>
226:             <View style={styles.headerContainer}>
227:                 <SegmentedButtons
228:                     value={activeTab}
229:                     onValueChange={setActiveTab}
230:                     buttons={[
231:                         { value: 'all', label: t('allMessages') },
232:                         { value: 'favorites', label: t('favorites') },
233:                     ]}
234:                     style={styles.segmentedButtons}
235:                 />
236:                 <Searchbar
237:                     placeholder={t('searchMessages')}
238:                     onChangeText={setSearchQuery}
239:                     value={searchQuery}
240:                     style={styles.searchBar}
241:                 />
242:             </View>
243:             {displayedMessages.length === 0 ? (
244:                 <Surface style={styles.emptyContainer}>
245:                     <Text variant="headlineSmall">
246:                         {activeTab === 'favorites' ? t('noFavorites') : t('noMessages')}
247:                     </Text>
248:                     <Text variant="bodyMedium" style={styles.emptyText}>
249:                         {activeTab === 'favorites' 
250:                             ? t('noFavorites') 
251:                             : t('messagesWillAppearHere')}
252:                     </Text>
253:                 </Surface>
254:             ) : (
255:                 <View>
256:                     <FlashList
257:                         data={displayedMessages}
258:                         renderItem={renderItem}
259:                         estimatedItemSize={64}
260:                         keyExtractor={(item) => item.id}
261:                         ItemSeparatorComponent={() => <Divider />}
262:                         onEndReached={() => {
263:                             if (hasMore && !isLoadingMore && cursor) {
264:                                 loadMessages(cursor, true);
265:                             }
266:                         }}
267:                         onEndReachedThreshold={0.5}
268:                         ListFooterComponent={() =>
269:                             isLoadingMore ? (
270:                                 <ActivityIndicator
271:                                     style={styles.loadingMore}
272:                                     size="small"
273:                                 />
274:                             ) : null
275:                         }
276:                     />
277:                     {messages.length > 0 && (
278:                         <Button
279:                             mode="contained"
280:                             onPress={() => setShowClearDialog(true)}
281:                             style={styles.clearButton}
282:                             buttonColor={theme.colors.error}
283:                             icon="delete-sweep"
284:                         >
285:                             {t('clearAllHistory')}
286:                         </Button>
287:                     )}
288:                 </View>
289:             )}
290:             <Dialog
291:                 visible={showClearDialog}
292:                 onDismiss={() => setShowClearDialog(false)}
293:             >
294:                 <Dialog.Title>{t('clearHistoryTitle')}</Dialog.Title>
295:                 <Dialog.Content>
296:                     <Text variant="bodyLarge">
297:                         {t('clearHistoryConfirmMessage')}
298:                     </Text>
299:                 </Dialog.Content>
300:                 <Dialog.Actions>
301:                     <Button onPress={() => setShowClearDialog(false)}>
302:                         {t('cancel')}
303:                     </Button>
304:                     <Button
305:                         onPress={handleClearHistory}
306:                         textColor={theme.colors.error}
307:                         icon="delete-sweep"
308:                     >
309:                         {t('clearAll')}
310:                     </Button>
311:                 </Dialog.Actions>
312:             </Dialog>
313:             <Dialog
314:                 visible={showDeleteDialog}
315:                 onDismiss={() => setShowDeleteDialog(false)}
316:             >
317:                 <Dialog.Title>{t('deleteMessage')}</Dialog.Title>
318:                 <Dialog.Content>
319:                     <Text variant="bodyLarge">
320:                         {t('deleteMessageConfirm')}
321:                     </Text>
322:                 </Dialog.Content>
323:                 <Dialog.Actions>
324:                     <Button onPress={() => setShowDeleteDialog(false)}>
325:                         {t('cancel')}
326:                     </Button>
327:                     <Button
328:                         onPress={handleDeleteMessage}
329:                         textColor={theme.colors.error}
330:                         icon="delete"
331:                     >
332:                         {t('delete')}
333:                     </Button>
334:                 </Dialog.Actions>
335:             </Dialog>
336:             <Snackbar
337:                 visible={snackbarVisible}
338:                 onDismiss={() => setSnackbarVisible(false)}
339:                 duration={3000}
340:                 action={{
341:                     label: "Dismiss",
342:                     onPress: () => setSnackbarVisible(false),
343:                 }}
344:             >
345:                 {snackbarMessage}
346:             </Snackbar>
347:         </PageLayout>
348:     );
349: }
350: const styles = StyleSheet.create({
351:     loadingContainer: {
352:         flex: 1,
353:         justifyContent: "center",
354:         alignItems: "center",
355:     },
356:     loadingMore: {
357:         padding: 8,
358:     },
359:     messageText: {
360:         fontSize: 16,
361:     },
362:     timestamp: {
363:         fontSize: 12,
364:         color: "gray",
365:     },
366:     clearButton: {
367:         margin: 16,
368:     },
369:     title: {
370:         padding: 16,
371:         paddingBottom: 8,
372:     },
373:     headerContainer: {
374:         padding: 8,
375:         gap: 8,
376:     },
377:     segmentedButtons: {
378:         marginBottom: 8,
379:     },
380:     rightIcons: {
381:         flexDirection: 'row',
382:         alignItems: 'center',
383:     },
384:     searchBar: {
385:         elevation: 0,
386:         borderWidth: 1,
387:         borderColor: "rgba(0,0,0,0.1)",
388:     },
389:     emptyContainer: {
390:         flex: 1,
391:         justifyContent: "center",
392:         alignItems: "center",
393:         padding: 16,
394:     },
395:     emptyText: {
396:         marginTop: 8,
397:         color: "gray",
398:         textAlign: "center",
399:     },
400: });
</file>

<file path="app/index.tsx">
 1: import { useEffect } from 'react';
 2: import { useTranslation } from 'react-i18next';
 3: import { Platform } from 'react-native';
 4: import HomeScreen from "./components/HomeScreen";
 5: export default function Index() {
 6:   useEffect(() => {
 7:     if (Platform.OS === 'web' && typeof window !== 'undefined') {
 8:       const initServiceWorker = () => {
 9:         import('./utils/registerServiceWorker')
10:           .then(({ registerServiceWorker }) => registerServiceWorker())
11:           .catch(error => console.error('Failed to load SW registration:', error));
12:       };
13:       window.addEventListener('load', initServiceWorker);
14:       return () => window.removeEventListener('load', initServiceWorker);
15:     }
16:   }, []);
17:   useEffect(() => {
18:     if (Platform.OS === 'web' && typeof document !== 'undefined') {
19:       const metaTags = [
20:         { property: 'og:title', content: 'Orbiting' },
21:         { property: 'og:description', content: 'A simple messaging app for your eyeballs. You can use it to type and display messages to those around you. Display a message loud and clear.' },
22:         { property: 'og:image', content: 'https://orbiting.com/imgs/og.png' },
23:         { property: 'og:url', content: window.location.href },
24:         { property: 'og:type', content: 'website' }
25:       ];
26:       metaTags.forEach(({ property, content }) => {
27:         let metaTag = document.querySelector(`meta[property="${property}"]`);
28:         if (!metaTag) {
29:           metaTag = document.createElement('meta');
30:           metaTag.setAttribute('property', property);
31:           document.head.appendChild(metaTag);
32:         }
33:         metaTag.setAttribute('content', content);
34:       });
35:     }
36:   }, []);
37:   return <HomeScreen />;
38: }
</file>

<file path="app/settings.tsx">
  1: import { StyleSheet, View } from 'react-native';
  2: import { Text, Button, List, Surface, useTheme, Portal, Modal, TouchableRipple, RadioButton } from 'react-native-paper';
  3: import { useTranslation } from 'react-i18next';
  4: import { useState } from 'react';
  5: import { LanguageSelector } from './components/LanguageSelector';
  6: import { MaterialCommunityIcons } from '@expo/vector-icons';
  7: import Slider from '@react-native-community/slider';
  8: import PageLayout from './components/PageLayout';
  9: import { useSettings } from './context/SettingsContext';
 10: import type { ThemeType } from './context/SettingsContext';
 11: import { THEMES } from './themes';
 12: const FONT_SIZES = [16, 18, 20, 24, 28, 32, 36, 40];
 13: const MIN_FONT_SIZE = Math.min(...FONT_SIZES);
 14: const MAX_FONT_SIZE = Math.max(...FONT_SIZES);
 15: const ThemeSelector = ({ theme, onSelect }: { theme: ThemeType; onSelect: (theme: ThemeType) => void }) => {
 16:   const [visible, setVisible] = useState(false);
 17:   const paperTheme = useTheme();
 18:   const foundTheme = THEMES.find(t => t.value === theme);
 19:   if (!foundTheme) {
 20:     // Fallback to a default or handle error
 21:     return null;
 22:   }
 23:   const currentTheme = foundTheme;
 24:   return (
 25:     <>
 26:       <TouchableRipple onPress={() => setVisible(true)}>
 27:         <View style={styles.themePreview}>
 28:           <View style={[styles.themeColor, { backgroundColor: currentTheme.colors.primary }]} />
 29:           <View style={[styles.themeColor, { backgroundColor: currentTheme.colors.secondary }]} />
 30:           <Text>{currentTheme.label}</Text>
 31:         </View>
 32:       </TouchableRipple>
 33:       <Portal>
 34:         <Modal visible={visible} onDismiss={() => setVisible(false)} contentContainerStyle={styles.modal}>
 35:           <Surface style={styles.themeGrid}>
 36:             {THEMES.map((t) => (
 37:               <TouchableRipple
 38:                 key={t.value}
 39:                 onPress={() => {
 40:                   onSelect(t.value);
 41:                   setVisible(false);
 42:                 }}
 43:               >
 44:                 <View style={[
 45:                   styles.themeOption,
 46:                   theme === t.value && { borderColor: paperTheme.colors.primary, borderWidth: 2 }
 47:                 ]}>
 48:                   <View style={[styles.themeColor, { backgroundColor: t.colors.primary }]} />
 49:                   <View style={[styles.themeColor, { backgroundColor: t.colors.secondary }]} />
 50:                   <Text>{t.label}</Text>
 51:                 </View>
 52:               </TouchableRipple>
 53:             ))}
 54:           </Surface>
 55:         </Modal>
 56:       </Portal>
 57:     </>
 58:   );
 59: };
 60: export default function SettingsScreen() {
 61:   const {
 62:     colorScheme,
 63:     startingFontSize,
 64:     theme,
 65:     shakeMode,
 66:     updateSettings,
 67:     resetSettings,
 68:   } = useSettings();
 69:   const [isResetting, setIsResetting] = useState(false);
 70:   const paperTheme = useTheme();
 71:   const { t } = useTranslation();
 72:   const COLOR_SCHEMES = [
 73:     { label: t('system'), value: 'system', icon: 'theme-light-dark' },
 74:     { label: t('light'), value: 'light', icon: 'white-balance-sunny' },
 75:     { label: t('dark'), value: 'dark', icon: 'moon-waning-crescent' },
 76:   ];
 77:   const handleReset = async () => {
 78:     setIsResetting(true);
 79:     await resetSettings();
 80:     setIsResetting(false);
 81:   };
 82:   return (
 83:     <PageLayout scrollable>
 84:       <Surface style={styles.container}>
 85:         <Text variant="headlineMedium" style={styles.title}>{t('settings')}</Text>
 86:         <LanguageSelector />
 87:         <List.Section>
 88:           <List.Subheader>{t('appearance')}</List.Subheader>
 89:           <List.Item
 90:             title={t('colorScheme')}
 91:             description={t('chooseColorScheme')}
 92:             left={props => (
 93:               <List.Icon
 94:                 {...props}
 95:                 icon={COLOR_SCHEMES.find(scheme => scheme.value === colorScheme)?.icon}
 96:               />
 97:             )}
 98:             right={props => (
 99:               <View style={styles.colorSchemeContainer}>
100:                 {COLOR_SCHEMES.map((scheme) => (
101:                   <TouchableRipple
102:                     key={scheme.value}
103:                     onPress={() => updateSettings({ colorScheme: scheme.value })}
104:                     style={styles.colorSchemeButton}
105:                   >
106:                     <MaterialCommunityIcons
107:                       name={scheme.icon}
108:                       size={24}
109:                       color={colorScheme === scheme.value ? paperTheme.colors.primary : paperTheme.colors.onSurfaceVariant}
110:                     />
111:                   </TouchableRipple>
112:                 ))}
113:               </View>
114:             )}
115:           />
116:           <List.Item
117:             title={t('startingFontSize')}
118:             description={`${startingFontSize}px`}
119:             left={props => <List.Icon {...props} icon="format-size" />}
120:           />
121:           <View style={styles.sliderContainer}>
122:             <Slider
123:               style={styles.slider}
124:               value={startingFontSize}
125:               minimumValue={MIN_FONT_SIZE}
126:               maximumValue={MAX_FONT_SIZE}
127:               step={1}
128:               onValueChange={(value) => updateSettings({ startingFontSize: value })}
129:               minimumTrackTintColor={paperTheme.colors.primary}
130:               maximumTrackTintColor={paperTheme.colors.onSurfaceVariant}
131:             />
132:             <View style={styles.sliderMarks}>
133:               {FONT_SIZES.map((size) => (
134:                 <Text key={size} style={styles.sliderMark}>{size}</Text>
135:               ))}
136:             </View>
137:           </View>
138:           <List.Item
139:             title={t('theme')}
140:             description={t('chooseTheme')}
141:             left={props => <List.Icon {...props} icon="palette" />}
142:           />
143:           <View style={styles.themeContainer}>
144:             <ThemeSelector theme={theme} onSelect={(value) => updateSettings({ theme: value })} />
145:           </View>
146:         </List.Section>
147:         <List.Section>
148:           <List.Subheader>{t('gestures')}</List.Subheader>
149:           <List.Item
150:             title={t('shakeAction')}
151:             description={t('shakeDescription')}
152:             left={props => <List.Icon {...props} icon="gesture" />}
153:           />
154:           <RadioButton.Group 
155:             onValueChange={value => updateSettings({ shakeMode: value })} 
156:             value={shakeMode}
157:           >
158:             <List.Item
159:               title={t('none')}
160:               left={props => <RadioButton {...props} value="none" />}
161:             />
162:             <List.Item
163:               title={t('clearText')}
164:               description={t('clearTextDescription')}
165:               left={props => <RadioButton {...props} value="clear" />}
166:             />
167:             <List.Item
168:               title={t('flashScreen')}
169:               description={t('flashScreenDescription')}
170:               left={props => <RadioButton {...props} value="flash" />}
171:             />
172:           </RadioButton.Group>
173:         </List.Section>
174:         <Button
175:           loading={isResetting}
176:           mode="contained"
177:           onPress={handleReset}
178:           style={styles.resetButton}
179:           buttonColor={paperTheme.colors.error}
180:         >
181:           {t('resetDefaults')}
182:         </Button>
183:       </Surface>
184:     </PageLayout>
185:   );
186: }
187: const styles = StyleSheet.create({
188:   container: {
189:     flex: 1,
190:     padding: 16,
191:   },
192:   title: {
193:     marginBottom: 24,
194:   },
195:   resetButton: {
196:     margin: 16,
197:   },
198:   colorSchemeContainer: {
199:     flexDirection: 'row',
200:     alignItems: 'center',
201:     gap: 16,
202:   },
203:   colorSchemeButton: {
204:     padding: 8,
205:     borderRadius: 20,
206:   },
207:   sliderContainer: {
208:     paddingHorizontal: 16,
209:     marginBottom: 16,
210:   },
211:   slider: {
212:     width: '100%',
213:     height: 40,
214:   },
215:   sliderMarks: {
216:     flexDirection: 'row',
217:     justifyContent: 'space-between',
218:     paddingHorizontal: 10,
219:   },
220:   sliderMark: {
221:     fontSize: 12,
222:     color: 'gray',
223:   },
224:   themeContainer: {
225:     padding: 16,
226:   },
227:   themePreview: {
228:     flexDirection: 'row',
229:     alignItems: 'center',
230:     gap: 8,
231:     padding: 8,
232:     borderRadius: 8,
233:     backgroundColor: 'rgba(0,0,0,0.05)',
234:   },
235:   themeColor: {
236:     width: 24,
237:     height: 24,
238:     borderRadius: 12,
239:   },
240:   modal: {
241:     padding: 20,
242:     margin: 20,
243:   },
244:   themeGrid: {
245:     flexDirection: 'row',
246:     flexWrap: 'wrap',
247:     gap: 16,
248:     padding: 16,
249:     borderRadius: 8,
250:   },
251:   themeOption: {
252:     flexDirection: 'row',
253:     alignItems: 'center',
254:     gap: 8,
255:     padding: 8,
256:     borderRadius: 8,
257:     backgroundColor: 'rgba(0,0,0,0.05)',
258:     borderWidth: 2,
259:     borderColor: 'transparent',
260:   },
261: });
</file>

<file path="public/imgs/logo/orbiting-icon.svg">
 1: <?xml version="1.0" encoding="UTF-8"?>
 2: <svg width="800px" height="800px" viewBox="0 0 800 800" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 3:     <!-- Generator: Sketch 43.1 (39012) - http://www.bohemiancoding.com/sketch -->
 4:     <title>Icon</title>
 5:     <desc>Created with Sketch.</desc>
 6:     <defs></defs>
 7:     <g id="App-icon-on-phone" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
 8:         <g id="H.09-Green-on-gray-bg" transform="translate(-112.000000, -112.000000)">
 9:             <g id="Icon" transform="translate(112.000000, 112.000000)">
10:                 <path d="M609.375,1.3636435e-14 C725,1.3636435e-14 800,75 800,190.625 L800,609.375 C800,725 725,800 609.375,800 L190.625,800 C75,800 0,725 0,609.375 L0,190.625 C0,75 75,1.3636435e-14 190.625,1.3636435e-14 L609.375,1.3636435e-14 Z" id="App-Icon-Shape-Copy" fill="#424242"></path>
11:                 <g id="Group" transform="translate(399.513546, 409.513546) rotate(-135.000000) translate(-399.513546, -409.513546) translate(169.013546, 124.513546)" fill="#76FE03">
12:                     <path d="M285,459.397569 C285.200465,459.398244 285.401009,459.398582 285.601632,459.398582 C382.155743,459.398582 460.428315,381.12601 460.428315,284.571899 C460.428315,188.017789 382.155743,109.745217 285.601632,109.745217 C285.401009,109.745217 285.200465,109.745555 285,109.74623 L285,459.397641 Z" id="Combined-Shape"></path>
13:                     <path d="M1.92702224e-08,569.143176 C0.200495387,569.143591 0.401039433,569.143799 0.601631954,569.143799 C157.766352,569.143799 285.173531,441.73662 285.173531,284.571899 C285.173531,127.407179 157.766352,6.82121026e-13 0.601631954,6.82121026e-13 C0.401039433,6.82121026e-13 0.200495387,0.000207545464 1.92702235e-08,0.000622433364 L3.0877743e-08,109.746158 C0.200464697,109.745555 0.401008861,109.745217 0.601631954,109.745217 C97.1557426,109.745217 175.428315,188.017789 175.428315,284.571899 C175.428315,381.12601 97.1557426,459.398582 0.601631954,459.398582 C0.401008861,459.398582 0.200464697,459.398244 1.92623695e-14,459.397569 L3.0877743e-08,569.143221 Z" id="Combined-Shape-Copy" transform="translate(142.586766, 284.571899) rotate(-180.000000) translate(-142.586766, -284.571899) "></path>
14:                 </g>
15:             </g>
16:         </g>
17:     </g>
18: </svg>
</file>

<file path="public/browserconfig.xml">
1: <?xml version="1.0" encoding="utf-8"?>
2: <browserconfig><msapplication><tile><square70x70logo src="/imgs/ms-icon-70x70.png"/><square150x150logo src="/imgs/ms-icon-150x150.png"/><square310x310logo src="/imgs/ms-icon-310x310.png"/><TileColor>#ffffff</TileColor></tile></msapplication></browserconfig>
</file>

<file path="public/manifest.json">
 1: {
 2:  "name": "Orbiting",
 3:  "short_name": "Orbiting",
 4:  "dir": "auto",
 5:  "lang": "en-US",
 6:  "display": "standalone",
 7:  "orientation": "portrait",
 8:  "start_url": "/?homescreen=1&utm_source=web_app_manifest&utm_medium=web_app_manifest",
 9:  "background_color": "#ffffff",
10:  "theme_color": "#ffffff",
11:  "icons": [
12:   {
13:    "src": "/imgs/android-icon-36x36.png",
14:    "sizes": "36x36",
15:    "type": "image/png",
16:    "density": "0.75"
17:   },
18:   {
19:    "src": "/imgs/android-icon-48x48.png",
20:    "sizes": "48x48",
21:    "type": "image/png",
22:    "density": "1.0"
23:   },
24:   {
25:    "src": "/imgs/android-icon-72x72.png",
26:    "sizes": "72x72",
27:    "type": "image/png",
28:    "density": "1.5"
29:   },
30:   {
31:    "src": "/imgs/android-icon-96x96.png",
32:    "sizes": "96x96",
33:    "type": "image/png",
34:    "density": "2.0"
35:   },
36:   {
37:    "src": "/imgs/android-icon-144x144.png",
38:    "sizes": "144x144",
39:    "type": "image/png",
40:    "density": "3.0"
41:   },
42:   {
43:    "src": "/imgs/android-icon-192x192.png",
44:    "sizes": "192x192",
45:    "type": "image/png",
46:    "density": "4.0"
47:   }
48:  ],
49:  "scope": "/",
50:  "description": "A text display app",
51:  "related_applications": []
52: }
</file>

<file path=".eslintrc.js">
1: // https://docs.expo.dev/guides/using-eslint/
2: module.exports = {
3:   extends: 'expo',
4:   ignorePatterns: ['/dist/*'],
5: };
</file>

<file path=".gitignore">
 1: # Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files
 2: 
 3: # dependencies
 4: node_modules/
 5: 
 6: # Expo
 7: .expo/
 8: dist/
 9: web-build/
10: expo-env.d.ts
11: 
12: # Native
13: *.orig.*
14: *.jks
15: *.p8
16: *.p12
17: *.key
18: *.mobileprovision
19: 
20: # Metro
21: .metro-health-check*
22: 
23: # debug
24: npm-debug.*
25: yarn-debug.*
26: yarn-error.*
27: 
28: # macOS
29: .DS_Store
30: *.pem
31: 
32: # local env files
33: .env*.local
34: 
35: # typescript
36: *.tsbuildinfo
37: 
38: app-example
39: .aider*
</file>

<file path="app.json">
 1: {
 2:     "expo": {
 3:         "name": "Orbiting",
 4:         "slug": "orbiting",
 5:         "version": "1.0.0",
 6:         "orientation": "portrait",
 7:         "icon": "./assets/images/icon.png",
 8:         "scheme": "com.harperrules.orbiting",
 9:         "userInterfaceStyle": "automatic",
10:         "newArchEnabled": true,
11:         "ios": {
12:             "supportsTablet": true,
13:             "bundleIdentifier": "com.harperrules.orbiting"
14:         },
15:         "android": {
16:             "package": "com.harperrules.orbiting",
17: 
18:             "adaptiveIcon": {
19:                 "foregroundImage": "./assets/images/adaptive-icon.png",
20:                 "backgroundColor": "#ffffff"
21:             }
22:         },
23:         "web": {
24:             "bundler": "metro",
25:             "output": "static",
26:             "favicon": "./assets/images/favicon.png",
27:             "name": "Orbiting",
28:             "shortName": "Orbiting",
29:             "description": "A text display app",
30:             "lang": "en",
31:             "themeColor": "#000000",
32:             "backgroundColor": "#ffffff",
33:             "startUrl": "/",
34:             "display": "standalone",
35:             "orientation": "portrait",
36:             "icons": [
37:                 {
38:                     "src": "./assets/images/icon.png",
39:                     "sizes": "1024x1024",
40:                     "type": "image/png"
41:                 },
42:                 {
43:                     "src": "./assets/images/icon-192.png",
44:                     "sizes": "192x192",
45:                     "type": "image/png"
46:                 },
47:                 {
48:                     "src": "./assets/images/icon-512.png",
49:                     "sizes": "512x512",
50:                     "type": "image/png"
51:                 }
52:             ]
53:         },
54:         "plugins": [
55:             "expo-router",
56:             [
57:                 "expo-splash-screen",
58:                 {
59:                     "image": "./assets/images/splash-icon.png",
60:                     "imageWidth": 200,
61:                     "resizeMode": "contain",
62:                     "backgroundColor": "#ffffff"
63:                 }
64:             ]
65:         ],
66:         "experiments": {
67:             "typedRoutes": true
68:         }
69:     }
70: }
</file>

<file path="biome.json">
 1: {
 2:   "$schema": "https://biomejs.dev/schemas/1.5.3/schema.json",
 3:   "organizeImports": {
 4:     "enabled": true
 5:   },
 6:   "formatter": {
 7:     "enabled": true,
 8:     "indentWidth": 2,
 9:     "indentStyle": "space"
10:   },
11:   "linter": {
12:     "enabled": true,
13:     "rules": {
14:       "recommended": true,
15:       "a11y": {
16:         "noSvgWithoutTitle": "off",
17:         "useKeyWithClickEvents": "off",
18:         "useButtonType": "off",
19:         "useAltText": "off"
20:       },
21:       "correctness": {
22:         "useExhaustiveDependencies": "off"
23:       },
24:       "style": {
25:         "useSelfClosingElements": "off",
26:         "noUnusedTemplateLiteral": "off"
27:       }
28:     }
29:   },
30:   "vcs": {
31:     "enabled": true,
32:     "clientKind": "git",
33:     "useIgnoreFile": true
34:   },
35:   "files": {
36:     "ignoreUnknown": true
37:   }
38: }
</file>

<file path="jest.setup.js">
1: import "@testing-library/jest-native/extend-expect";
</file>

<file path="package.json">
 1: {
 2:   "name": "chat",
 3:   "main": "expo-router/entry",
 4:   "version": "1.0.0",
 5:   "scripts": {
 6:     "start": "expo start",
 7:     "reset-project": "node ./scripts/reset-project.js",
 8:     "android": "expo start --android",
 9:     "ios": "expo start --ios",
10:     "web": "expo start --web",
11:     "test": "jest",
12:     "test:watch": "jest --watchAll",
13:     "test:coverage": "jest --coverage",
14:     "lint": "expo lint",
15:     "build:web": "expo export -p web && npx workbox-cli generateSW workbox-config.js",
16:     "format": "biome check --no-errors-on-unmatched --apply .",
17:     "expo-check": "expo install --check"
18:   },
19:   "jest": {
20:     "preset": "jest-expo",
21:     "setupFilesAfterEnv": [
22:       "./jest.setup.js"
23:     ],
24:     "collectCoverageFrom": [
25:       "app/**/*.{js,jsx,ts,tsx}",
26:       "!app/**/*.d.ts",
27:       "!app/**/__tests__/**"
28:     ],
29:     "coverageThreshold": {
30:       "global": {
31:         "branches": 80,
32:         "functions": 80,
33:         "lines": 80,
34:         "statements": 80
35:       }
36:     }
37:   },
38:   "dependencies": {
39:     "@expo/vector-icons": "^14.0.2",
40:     "@react-native-async-storage/async-storage": "1.23.1",
41:     "@react-native-community/slider": "4.5.5",
42:     "@react-native-picker/picker": "2.9.0",
43:     "@react-navigation/bottom-tabs": "^7.2.0",
44:     "@react-navigation/native": "^7.0.14",
45:     "@shopify/flash-list": "1.7.3",
46:     "@types/js-cookie": "^3.0.6",
47:     "@types/node": "^22.13.1",
48:     "expo": "~52.0.32",
49:     "expo-blur": "~14.0.3",
50:     "expo-constants": "~17.0.5",
51:     "expo-font": "~13.0.3",
52:     "expo-haptics": "~14.0.1",
53:     "expo-linking": "~7.0.5",
54:     "expo-router": "~4.0.17",
55:     "expo-splash-screen": "~0.29.21",
56:     "expo-status-bar": "~2.0.1",
57:     "expo-symbols": "~0.2.2",
58:     "expo-system-ui": "~4.0.8",
59:     "expo-web-browser": "~14.0.2",
60:     "js-cookie": "^3.0.5",
61:     "react": "18.3.1",
62:     "react-dom": "18.3.1",
63:     "react-native": "0.76.7",
64:     "react-native-device-info": "^14.0.4",
65:     "react-native-gesture-handler": "~2.20.2",
66:     "react-native-paper": "^5.13.1",
67:     "react-native-reanimated": "~3.16.1",
68:     "react-native-safe-area-context": "4.12.0",
69:     "react-native-screens": "~4.4.0",
70:     "react-native-shake": "^6.0.0-beta.3",
71:     "react-native-vector-icons": "^10.2.0",
72:     "react-native-web": "~0.19.13",
73:     "react-native-webview": "13.12.5",
74:     "web-push": "^3.6.7",
75:     "workbox-webpack-plugin": "^7.3.0",
76:     "workbox-window": "^7.3.0",
77:     "i18next": "^23.10.0",
78:     "react-i18next": "^14.0.5",
79:     "expo-localization": "~14.3.0"
80:   },
81:   "devDependencies": {
82:     "@babel/core": "^7.25.2",
83:     "@testing-library/jest-native": "^5.4.3",
84:     "@testing-library/react-native": "^12.9.0",
85:     "@types/jest": "^29.5.12",
86:     "@types/react": "~18.3.12",
87:     "@types/react-test-renderer": "^18.3.0",
88:     "biome": "^0.3.3",
89:     "jest": "^29.2.1",
90:     "jest-expo": "~52.0.3",
91:     "react-test-renderer": "18.3.1",
92:     "typescript": "^5.3.3",
93:     "eslint": "^8.57.0",
94:     "eslint-config-expo": "~8.0.1"
95:   },
96:   "private": true
97: }
</file>

<file path="README.md">
 1: # 📚 Project README.md
 2: 
 3: ## 💡 Summary of Project
 4: 
 5: Welcome to the **Chat App**! This application is built using the **Expo** framework for React Native, providing a seamless experience for capturing and managing text inputs in real-time. The app not only allows users to enter and edit text, but it also incorporates features to store messages, load them later, and clear history as needed. The main goal is to create an intuitive and efficient text management tool on mobile devices. 
 6: 
 7: ## 🚀 How to Use
 8: 
 9: 1. **Installation**:
10:    - First, clone the repository:
11: 
12: 2. **Starting the App**:
13:    - Run the Expo command to start the app:
14:      ```bash
15:      npx expo start
16:      ```
17:    - After running the command, you will see options to open the app in:
18:      - **Development build**
19:      - **Android emulator**
20:      - **iOS simulator**
21:      - **Expo Go**, a sandbox for trying out app development with Expo
22: 
23: 3. **Using the App**:
24:    - Type or paste your text in the Home screen.
25:    - The text will automatically adjust its size to fit the screen.
26:    - Access your message history and clear it as needed by navigating through the tabs.
27: 
28: 4. **Additional Features**:
29:    - The app supports auto-saving, allowing you to continue where you left off.
30:    - Text scaling adjusts automatically based on message length.
31: 
32: 5. **Explore Settings**: 
33:    - Go to the settings tab to explore app preferences and configurations.
34: 
35: ## 🔧 Tech Info
36: 
37: - **Framework**: Expo (React Native)
38: - **Testing Library**: Jest, React Testing Library
39: - **State Management**: Context API
40: - **Storage**: AsyncStorage for persistent message storage
41: - **Components**: Built with reusable React components, following best practices for accessibility and responsiveness.
42: - **Testing**: Includes a suite of tests for components and utilities.
43:   
44: For detailed architecture and features, refer to the full directory structure and available components within the app:
45: 
46: ```
47: app/
48:   ├─ __tests__/
49:   ├─ components/
50:   ├─ context/
51:   ├─ utils/
52:   ├─ _layout.tsx
53:   ├─ history.tsx
54:   ├─ about.tsx
55:   ├─ help.tsx
56:   └─ settings.tsx
57: ```
58: 
59: Feel free to contribute! Open issues for bugs or features you'd like to see improved, or submit a pull request with your enhancements! 
60: 
61: Happy coding! 🎉
</file>

<file path="tsconfig.json">
 1: {
 2:   "extends": "expo/tsconfig.base",
 3:   "compilerOptions": {
 4:     "strict": true,
 5:     "paths": {
 6:       "@/*": [
 7:         "./*"
 8:       ]
 9:     }
10:   },
11:   "include": [
12:     "**/*.ts",
13:     "**/*.tsx",
14:     ".expo/types/**/*.ts",
15:     "expo-env.d.ts"
16:   ]
17: }
</file>

<file path="workbox-config.js">
 1: module.exports = {
 2: 	globDirectory: 'dist/',
 3: 	globPatterns: [
 4: 		'**/*.{js,html,xml,ico,png,svg,json,css,woff2,webp}'
 5: 	],
 6: 	swDest: 'dist/sw.js',
 7: 	ignoreURLParametersMatching: [
 8: 		/^utm_/,
 9: 		/^fbclid$/
10: 	]
11: };
</file>

</files>
